{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>In Progress as of 6/27/2025</p> <p>This sites intended purpose is to give comprehensive install and usage of the last best PS2 modchips.</p> <p>If you would like to help in any way, please DM me on  Specifically for this site, more writeups, VMC packages for MMCE devices like MemcardPro 2 and SD2PSX so that users have a quick way to have pre-setup memory cards. </p> <p>Should I ever leave the scene,  or  me so that I can transfer domain ownership and github repository to a well respected care-taker.</p> <p>No thanks to:</p> <p>TnA Plastic of PS2 Scene Discord, psx-place.com and r/ps2homebrew</p> <p>r/PS2 and Mods</p>"},{"location":"#ps2-homebrew","title":"PS2 Homebrew","text":"<p>Click HERE for MMCE VMC downloads. These are ready to go for you! (Multipurpose Memory Card Emulator Virtual Memory Cards)</p>"},{"location":"#progress-checklist","title":"Progress Checklist","text":"<ul> <li> <p> Crystal Chip Progress</p> <ul> <li> Crystal Chip documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware &amp; BootManager Installation</li> <li> Installing and Running Apps</li> <li> R34 v5 Changes</li> <li> Configuration options overview</li> <li> Using App MegaPacks</li> <li> Using PS2Client/Link to help debug</li> </ul> </li> <li> Written Tutorials</li> <li> Files<ul> <li> Firmware/Bootmanager</li> <li> BM Megapack by R3Z3N<ul> <li> CD/USB Megapack</li> <li> SD2PSX/PSXMemcard Gen 2 Megapack</li> <li> MemcardPro 2 Megapack</li> </ul> </li> <li> Default APPINFO.PBT</li> </ul> </li> <li> PBT Scripting overview (wiki is outdated)</li> <li> Archived Websites<ul> <li> Crystal Chip website</li> <li> Crystal Chip wiki</li> </ul> </li> </ul> </li> </ul> </li> <li> <p> DMS4 Progress</p> <ul> <li> DMS4 documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware, Toxic Config/OS</li> <li> Adding apps</li> </ul> </li> <li> Written Tutorials<ul> <li> Scripting</li> </ul> </li> <li> Files<ul> <li> Recovery CDs</li> <li> Toxic OS</li> </ul> </li> <li> Archived Websites</li> </ul> </li> </ul> </li> </ul> <ul> <li> <p> Ghost 2 Progress</p> <ul> <li> Ghost2v2 documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware, G2 Loader &amp; Manager</li> <li> Adding apps</li> </ul> </li> <li> Written Tutorials</li> <li> Files<ul> <li> Recovery CDs</li> <li> G2 Loader &amp; Manager</li> <li> G2 Eraser</li> <li> SD2PSX/MCP2 setups</li> </ul> </li> <li> Archived Websites</li> </ul> </li> </ul> </li> <li> <p> Matrix Infinity Progress</p> <ul> <li> Matrix Infinity documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware, Config</li> <li> Adding apps</li> </ul> </li> <li> Written Tutorials<ul> <li> Key Combos</li> <li> What to add?</li> </ul> </li> <li> Files<ul> <li> Recovery ISOs</li> <li> Infinity Manager</li> <li> HDD Manager (DEV2)</li> <li> Ready to go Memory Card w APPS and FW updates</li> </ul> </li> <li> Archived Websites</li> </ul> </li> </ul> </li> </ul>"},{"location":"thanks/","title":"Thanks and Links","text":""},{"location":"thanks/#thanks-in-no-particular-order-to","title":"Thanks in no particular order to:","text":"<ul> <li> <p>SylverRez</p> <p>Modchip Github Repository</p> <p></p> </li> <li> <p>Will's Console Mods</p> <p>Modchip Showcase</p> <p></p> </li> <li> <p>Atheris Mods</p> <p>PCB/Soldering help and documentation</p> <p></p> </li> <li> <p>Modzville USA</p> <p>Modchip Installs</p> <p></p> </li> <li> <p>PS2 Versions (unofficial)</p> <p>This link will help you define what revision PS2 you have to cross reference with the install diagrams.</p> <p></p> </li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/2025/02/28/hello-world/","title":"Hello world!","text":""},{"location":"blog/2025/02/28/hello-world/#hello-world","title":"Hello world!","text":"<p>Welcome!</p> <p>You and I are here because of our mutual shared interest in the PS2 Scene, and more specifically the last best 3rd gen modchips.</p> <p>What makes a third gen modchip? Boot from something other than CD/DVD:  - Memory Card - Hard Drive - USB - MMCE (yay for Crystal Chips BootManager being extensible!)</p> <p>I was heavily involved in Xbox modding. But that was easy. I could have one done in ~30 minutes ready to go for a customer. But PS2? That was much more difficult. Things were rapidly changing. 16+ versions of potential motherboard variations. I had installed only a few hundred PS2 modchips back then, and that started with the last gen: Matrix Infinity, DMS4, and Crystal Chip.</p> <p>Crystal Chips kicked ass. They were so much better. More features, easier to use (if user had pre-built scripts per app like the BM Megapack) and didn't randomly die when installing like DMS4. Matrix was fine...but yawn. Oh so booring. And you had to remember boot controller key combos. LAME. Crystal Chip could use just about any key command you wanted so long as it wasn't x, select, joysticks or D-PAD. But I never really learned  to script the dashboard as was allowed. Seemed gibberish. </p> <p>As far as 2002-2007: Needing to burn discs, no organization for where to put files. Info was hard to get or non-existant. Teams advertising features that were not documented. Some teams (like Ghost) never delivering features that were promised the moment the website went up.</p> <p>So here I am. Almost 20 years later. I only kept one system. A V15 PSTwo Slim. In 2024 I saw Macho Nachos Video: I Made A PS2 So ADVANCED, It\u2019s Basically A PS3 | The PS2 Pro</p> <p>I was jealous. I had a better modchip. I had THE Crystal Chip 2.0 Pro SLE. I could have THE ACTUAL Pro PS2! So off to ModzvilleUSA! It was surreal. Kick ass if you will. </p> <p>And then I started searching for more. Modz sold me a CC 1.0, and my retro shop sold me another 1.0. Both NOS! (new old stock) And then more. More and more. I had to re-experience the thrill of the other greats. I had to help document, as FMCB is just utterly booring and non-extensible EXCEPT for  USBD.IRX and USBHDFSD.IRX. So you can only load 2 IRX? I can load them all! I can update! I can change! I can add!! So from October 2024 till now end of Feburary 2025 I ended up with this sweet collection, not all are in the picture mind you. Some are installed. Some came after:</p> <ul> <li>104 Crytsal Chip 1.0 Lite</li> <li>1 Crystal Chip 1.2 Lite (may turn into a 2.0)</li> <li>2 Crystal Chip 2.0 Pro SLE wtih 4MB Dataflash AT45DB321-MWU</li> <li>1 More Crystal Chip 1.2+ on the way...</li> <li>4 Ghost 2 v2</li> <li>2 DMS4 SE Lite</li> <li>1 DMS4 SE Pro</li> <li>6 Matrix Infinity Original</li> </ul> <p>So here begins my journey to update the Crystal Chip and document it along with the other 3 \"best of the best.\"</p> <p>I hope you enjoy and follow along my journey to helping others enjoy these sweet sweet pieces of history should you ever find one.</p>"},{"location":"blog/2025/02/28/hello-world/#r3z3ns-collection","title":"R3Z3N's Collection:","text":""},{"location":"blog/2025/03/20/side-project/","title":"Side project","text":"<p>Still working on this site. It is not abandoned. However in my push to get it done I needed a mental break.</p> <p>Since I plan on selling my Crystal Chip 1.0s to those that can or want to help, I need a way to quickly install while looking professional, yet also not taking 2-4 hours for the wiring beautificaion. </p> <p>So alas a sneak peak:</p> <p></p> <p></p> <p>I will be posting when done. The V12 PicFix first prototype should arrive in a week or so....</p>"},{"location":"crystal-chips/","title":"Overview","text":""},{"location":"crystal-chips/#overview","title":"Overview","text":""},{"location":"crystal-chips/#crystal-chip-documentation-progress","title":"Crystal Chip Documentation Progress","text":"Progress as of 6/27/2025 <ul> <li> Crystal Chip documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware &amp; BootManager Installation</li> <li> Installing and Running Apps</li> <li> R34 v3 Changes (out of date), MMCE added</li> <li> Configuration options overview</li> <li> Using App MegaPacks</li> <li> Using PS2Client/Link to help debug</li> </ul> </li> <li> Written Tutorials</li> <li> Files<ul> <li> Firmware/Bootmanager</li> <li> BM Megapack by R3Z3N<ul> <li> CD/USB Megapack</li> <li> SD2PSX/PSXMemcard Gen 2 Megapack</li> <li> MemcardPro 2 Megapack</li> </ul> </li> <li> Default APPINFO.PBT</li> </ul> </li> <li> PBT Scripting overview (wiki is outdated)</li> <li> Archived Websites<ul> <li> Crystal Chip website</li> <li> Crystal Chip wiki</li> </ul> </li> </ul> </li> </ul>"},{"location":"crystal-chips/#option-to-repurchase","title":"Option to repurchase","text":"Option to Repurchase <p>If you happened to come to this page due to this sticker then I thank you very much! </p> <p>Please email me here so that we may discuss futher as I would love to keep these chips in the hands of enthusiasts.</p>"},{"location":"crystal-chips/#crystal-chip-versions","title":"Crystal Chip versions","text":"CC 1.1 to 2.0 Conversion <p>CC 1.1 and later can be upgraded with 4MB dataflash: AT45DB321D-S or AT45DB321D-MW. I have several dozen in stock. Email me if you would like to upgrade. There are no changes needed in software/firmware/scripting. Solder on and go! Reference the attached picture to see where pin 1 (the black dimple dot on the EEPROM/DATAFLASH) is and how the flash is rotated 90 degrees clockwise from the CC1.1 to the CC1.2 and later. In this case it was already a CC2.0.</p> <p></p>"},{"location":"crystal-chips/#dashboard-bootmanager-may-be-installed-to-and-ran-from","title":"Dashboard \"BootManager\" may be installed to and ran from","text":"Crystal Chip Memcard 1 Memcard 2  USB  HDD  On-Chip Flash  PC Host 2.0 Pro SLE  2MB Dataflash 2.0 Pro  1MB Dataflash 1.2 Lite In Progress  128KB Dataflash 1.1 Lite In Progress  4KB EEPROM 1.0 Lite In Progress  4KB EEPROM BootManager <p>Bootmanager therefore must be installed to either Dataflash, MemoryCard or HDD. This is not your usual Matrix Infinity. It is much much better</p>"},{"location":"crystal-chips/#bootmanager-runinstallremove-device-support","title":"BootManager Run/Install/Remove device support","text":"CD/DVD  USB Fat16/32 Memory Card MMCE device  HDD  PC Host PC Host <p>Use PS2 Client and from where you installed/extracted run: <code>ps2client -h hostname/ip listen</code> Homebrew must be in same folder thatn PS2 Client is running from.  IE: ~/PS2Client/BM/APPS/APPFOLDER/ or SAS compliant: ~/PS2Client/ ~/PS2Client/APPS/ You still need an associated APPINFO.PBT</p> <p>Unable to RUN homebrew from PC Host</p> MMCE devices <p>It is best to install apps to MMCE devices using your PC. It seems there are bugs such as moving files between mc0/1 and mmmce0/1. I hope for updated IRXs or it just may be a limitation to the SIO2 Bus.</p> <p>Removing from MCP2 MMCE does not work. I have disabled REMOVE from MMCE.</p> USB Exfat <p>In Progress...Using BDM Assault for Exfat allows Install/Remove but oddly not Run. BDM Assault hotswap does work. I hope to fix.</p>"},{"location":"crystal-chips/cc-archived/","title":"Archived Website","text":""},{"location":"crystal-chips/cc-archived/#crystal-chips-archived-website","title":"Crystal Chips Archived Website","text":""},{"location":"crystal-chips/cc-files/","title":"Team Files","text":""},{"location":"crystal-chips/cc-files/#crystal-chip-fw-34-v5-by-r3z3n-6272025","title":"Crystal Chip FW 34 V5 by R3Z3N 6/27/2025","text":"<p> Crystal Chip FW R34 v5 with updated Dashboard Scripts by R3Z3N</p> R34 V5 Changes <p>Fixes/Changes:</p> <ul> <li> <p>SAS (Save Application Support) updated (and probably finalized). There is a script in BM/SCRIPTS/BMRTFLDR.PBT (BootManager Root Folder) \\     where root folders must be defined, similiar to how FMCB, PS2BBL and OSDMenu also need to define where apps are.      Edit as neeeded to add new folders, delete unneeded folders as necessary. To update, place file on root of     any device that you have device drivers installed for. Simply run BootManager, Application Browser and RUN/INSTALL/REMOVE     for said device and BootManager will copy the file where it needs to go and SHOULD remove the script from root of said device.     If not please manually delete with another app or PC. Simply grab a file from ps2wiki.github.io and drop to root of memory card     (once APPINFO.PBT is included with said app)</p> </li> <li> <p>Powershell script to create APPINFO.PBT if title.cfg exists. APPINFO is now much more friendly for user, and allows device specific compatibily options</p> </li> <li> <p>Added option to show directories when browsing for APPS, Devices and Themes</p> </li> <li> <p>Added options to confirm Remove and Install apps/devices and themes which also recalls directory and appname when browsing so you do     not loose track of which app you were installing or removing.</p> </li> <li> <p>Device Manager now shows which device drivers are installed. Inform users when device drivers are missing such as when FTP is installed but NET      is missing. SCPH-75K and later will inform user if HDD driver is unneeded</p> </li> <li> <p>Configuration Menus hide or inform users when device drivers are missing. For example NET/FTP/HOST and HDD. If NET is missing, FTP and HOST     inform user NET is missing as that is the backing driver. </p> </li> <li> <p>Added ability to hide apps for RUN/INSTALL/REMOVE. Reference BM/APPS/OSDSYS/APPINFO.PBT or BM/APPS/BM/APPINFO.PBT</p> </li> <li> <p>BootManager updates mc:/SYS-CONF/IPCONFIG.DAT if it exists so that your suite of apps that call your network config stay \"synced\"</p> </li> <li> <p>BootManager Installer updated. Allows choosing device drivers before installing and checks if drivers are on source device.     Informs user of Min/Max install just in case CC2.0/SLE users want to save space. Should fit on all 2.0 Models with full install.     Warns user if critical or non critical files are not installed. Non critical files continues installing (such as missing icons)     CC2.0 Installs no longer install other CC1.0 FW to flash to save more space.</p> </li> <li> <p>2 Tutorials under Configuration Menu so that users cannot forget how to update defined root folders, as well as how to use hotkeys.</p> </li> <li> <p>Added French Language thanks to Wanderer!</p> </li> <li> <p>Added Many more themes, 31 in total now. Still need to edit colors for font/title/menu/background. Please inform me if PAL, VGA or 480p     alignment needs fixing and what your values are.</p> </li> <li> <p>Fixed bug that \"Medias\" scripts would never be called</p> </li> <li> <p>Memory Card Manager hides devices that may not be inserted</p> </li> <li> <p>Easter Egg in menus.....</p> </li> <li> <p>Besides themes and apps, this is probably the last update unless I figure out how to show which hotkeys are assigned to what application     or god forbid any bugs I may have left. I may consolidate scripts if possible later.</p> </li> <li> <p>OLD APPINFO.PBT is still supported under BM/APPS/ however all the SAS compliant scripts are updated. I recommend using those going forward.</p> </li> </ul> <p>To Do:</p> <ul> <li> <p>Help Ripto create title.cfg for his AIO  (ALL IN ONE) app repository</p> </li> <li> <p>Bundle the new apps for the MegaPack as they are added to ps2wiki.github.io</p> </li> </ul>"},{"location":"crystal-chips/cc-files/#crystal-chip-fw-34-v4-by-r3z3n-5172025","title":"Crystal Chip FW 34 V4 by R3Z3N 5/17/2025","text":"R34 V4 Changes <p>Fixes/Changes:</p> <ul> <li> <p>SAS (Save Application Support) added as best as possible. Apps can be installed to:     mc?:/APPFOLDER/ but this needs an matching mc?:/BM/APPS/APPFOLDER/APPINFO/PBT     as there is a bug where we can not search for mc?:/*/APPINFO.PBT sadly. So this is a workaround.     This is nice as apps will show in the OSDSYS now.</p> <p>Also:</p> <p>nonmc?:/APPFOLDER </p> <p>nonmc?:/APPS/APPFOLDER</p> <p>fully work, no odd workarounds.</p> <p>Old APPINFO.PBT still supported.</p> </li> <li> <p>Installing from source to source shows a warning, same for CDDVD (cant install/remove from that!)      nor run from PC HOST (not supported)</p> </li> <li> <p>Power off added to BootManager. There is no proper restart.elf that I know of yet...</p> </li> <li> <p>Fixed System Info not showing console model as needed MATCHES not EQU (and reverse the argument)</p> </li> <li> <p>Fixed and added old themes which improperly used LOADING instead of the proper LOADIMG</p> </li> <li> <p>v14 and later PS2s no longer show HDD options and do not auto load HDD drivers.      However the setting is still saved so swapping your memcard between PS2s if you     have multiple chips still functions as you set it.</p> </li> <li> <p>v12 and later no longer show MegaMemory Patcher option as Sony blocked it's use electrically for PSTwo Slims.</p> </li> <li> <p>V16-v18 is now properly identified in Console Information</p> </li> <li> <p>Added PowerShell scripts to create APPINFO.PBT recursively and non recursively.     needs title.cfg included in app folder to create. However if apps need specifically     boot command IE <code>SHUTDOWN MM</code> or SET <code>\"BM.AUTOLOAD_FSD_EN\" \"0\"</code> may need to be added to the     run section. For example wLE ISR needs SHUTDOWN MM to run from USB.     Also need to add REDIRFILE for the apps that support it.</p> </li> </ul> <p>To Do:</p> <ul> <li> <p>Help Ripto create title.cfg for his AIO  (ALL IN ONE) app repository</p> </li> <li> <p>Still work on 8MB firmware</p> </li> <li> <p>Bundle the new apps for the MegaPack</p> </li> </ul>"},{"location":"crystal-chips/cc-files/#crystal-chip-fw-r34-v3-4292025","title":"Crystal Chip FW R34 V3 4/29/2025","text":"R34 V3 Changes <p>Fixes/Changes:</p> <ul> <li> <p>CC1.X firmware options to run BM from MemCard1,2, HDD and USB. HDD/USB boot needs HDD drivers on mc0:/BM/SHARED/ HDD and USB are commented out, go ahead and uncomment out in BM/FWS/LATEST/FWINFO.PBT to experiment</p> </li> <li> <p>MMCE device support for example SD2PSX, PsxMemCardGen2, MemCardPro2. SD2PSXTD MCP2</p> </li> <li> <p>Used El Isras USB drivers for exfat support: BDM Assault REASON: Unable to get EXFAT drivers to run apps from USB. Needs further testing.</p> </li> <li> <p>Security Settings added: when pin is set, advanced settings are unaccessible. </p> </li> <li> <p>Updated bminit.pbat to load IRX drivers from where BM is running from, otherwise with DEV1/2 would not see/run apps from mc0/1/USB/HDD.</p> </li> <li> <p>Updated HDDMOUNT.IRX and BM/SCRIPTS/HDDLOAD.PBT to load __common HDD partition instead of +Crystal. This is to keep things consistent with the homebrew community</p> </li> <li> <p>Changed scripts to allow apps to be installed when booted from recovery cd.</p> </li> <li> <p>Changed scripts to only show options for chip installed! IE no more seeing DFFS options on CC 1.XS</p> </li> <li> <p>Changed scripts so that FW choices are only applicable to the chip installed. IE CC1.0-1.2 can choose BM run point, CC2.0 DFFS only.</p> </li> <li> <p>BootManager app install no longer installs FW files to the dffs: partition to save  51KB for CC2.0 owners.</p> </li> <li> <p>Show Info gives a little more clarity IE where is BM executed from, what console region codes stand for etc.</p> </li> <li> <p>Cotton Candy theme added, each version of the Crystal Chip is represented!</p> </li> <li> <p>Added Italian and Spanish language translations.</p> </li> </ul>"},{"location":"crystal-chips/cc-files/#ps2-homebrew","title":"PS2 Homebrew","text":"<p>Click HERE for MMCE VMC downloads. These are ready to go for you! (Multipurpose Memory Card Emulator Virtual Memory Cards)</p>"},{"location":"crystal-chips/cc-files/#appinfopbt-sas-save-application-support-example","title":"APPINFO.PBT SAS (SAVE APPLICATION SUPPORT) Example","text":"APPINFO.PBT SAS Example <pre><code># SAS (Save Application Support) compliant BM Script\n# Due to wildcard bug on memory card and mmce, bootdevice:/BM/SCRIPTS/BMRTFLDR.PBT must exist to work. Update as needed.\n\n# Change this information to describe the application and where it should be ran from for memcard (SAS) or other devices (SAS_NON_MC)\n# SAS is the App folder name. SAS_NON_MC defines if app is in root of non-memcard device (non_mc:/$SAS$) or APP folder (non_mc:/APPS/$SAS$)\n# This is so that you do not have to edit any info below line 28.\n#\n# Some devices are case sensitive! Make sure your case matches!\n#\n# Source: website here\nSET \"TITLE\" \"[DST] PS2Temps\"\nSET \"VERSION\" \"1.0\"\nSET \"AUTHOR\" \"authors here\"\nSET \"DESC\" \"Short blurb\"\nSET \"MEDIAS\" \"\"\nSET \"ELF\" \"PS2Temps.elf\"\nSET \"SAS\" \"DST_PS2TEMPS\"\n# Comment out 1 of the 2 lines below. If app is in non-mc:/$SAS$ comment out the second, if in non-mc:/APPS/$SAS$ comment out the first\n# SET \"SAS_NON_MC\" \"$SAS$\"\nSET \"SAS_NON_MC\" \"APPS/$SAS$\"\n#\n# If an app does not boot, then one of these compatibility options may need to be set to 0, 1, 2 or 3\n# 0= No compatibility options, 1= SHUTDOWN \"MM\", 2= SET \"BM.AUTOLOAD_FSD_EN\" \"0\", 3= CC SLEEP\nSET \"COMP_MODE_MC\" \"0\"\nSET \"COMP_MODE_MMCE\" \"0\"\nSET \"COMP_MODE_USB\" \"0\"\nSET \"COMP_MODE_HDD_APA\" \"0\"\nSET \"COMP_MODE_DFFS\" \"0\"\n#\n\n# Do not change these 2 lines!\nGOTO \"$ARG1$\"\nRETURN -1\n\n# Used for Autoboot Labels\n:LABEL_NAME\n    ADDWIDGET \"LABEL\" \"$ARG2$$TITLE$ v$VERSION$\"\n    EXIT 0\n\n:QUERY\n    ADDWIDGET \"CALL\" \"$TITLE$\" \"$BM.TXT_VERSION$: $VERSION$ $BM.TXT_AUTHOR$: $AUTHOR$ $BM.TXT_DESC$: $DESC$\" $ARG2$ \"$ARG0$\" \"$ARG3$\" \"$ARG4$\" \"$ARG5$\" \"$TITLE$\" \"$PWD$\" \"$SAS$\" \"$SAS_NON_MC$\"\n    EXIT 0\n\n:INSTALL\n        IF MATCHES \"mc?\" \"$ARG2$\"\n            GOTO \"INSTALL_TO_MC\"\n        ELSEIF NOT MATCHES \"mc?\" \"$ARG2$\"\n            GOTO \"INSTALL_TO_NONMC\"\n        ENDIF\n\n:INSTALL_TO_MC\n    IF FAIL COPY \"$PWD$\" \"$ARG2$:/$SAS$\"\n        ECHO \"Failed installing $TITLE$\"\n        MESSAGE \"Failed installing $TITLE$\"\n        RRM \"$ARG2$:/$SAS$\"\n        RETURN -1\n    ENDIF\n    EXIT 0\n\n:INSTALL_TO_NONMC\n    IF FAIL COPY \"$PWD$\" \"$ARG2$:/$SAS_NON_MC$\"\n        ECHO \"Failed installing $TITLE$\"\n        MESSAGE \"Failed installing $TITLE$\"\n        RRM \"$ARG2$:/$SAS_NON_MC$\"\n        RETURN -1\n    ENDIF\n    EXIT 0\n\n:REMOVE\n    IF FAIL RRM \"$PWD$\"\n        IF FAIL RRM \"$PWD$\"\n        IF FAIL RRM \"$PWD$\"\n            MESSAGE \"Failed removing $TITLE$\"\n            RETURN -1\n        ENDIF\n        ENDIF\n    ENDIF\n    EXIT 0\n\n:RUN\n    IF MATCHES \"mc?:/*\" \"$PWD$\"\n        GOTO \"RUN_MC\"\n    ELSEIF MATCHES \"mmce?:/*\" \"$PWD$\"\n        GOTO \"RUN_MMCE\"\n    ELSEIF MATCHES \"mass:/*\" \"$PWD$\"\n        GOTO \"RUN_USB\"\n    ELSEIF MATCHES \"pfs0:/*\" \"$PWD$\"\n        GOTO \"RUN_HDD_APA\"\n    ELSEIF MATCHES \"dffs:/*\" \"$PWD$\"\n        GOTO \"RUN_DFFS\"\n    ENDIF\n\n:RUN_MC\n    IF EQU \"$COMP_MODE_MC$\" \"1\"\n        SHUTDOWN \"MM\"\n    ELSEIF EQU \"$COMP_MODE_MC$\" \"2\"\n        SET \"BM.AUTOLOAD_FSD_EN\" \"0\"\n    ELSEIF EQU \"$COMP_MODE_MC$\" \"3\"\n        SETBIOS \"OFF\"\n        SHUTDOWN \"ALL\"\n    ENDIF\n    GOTO \"RUN_COMP_MODE\"\n\n:RUN_MMCE\n    IF EQU \"$COMP_MODE_MMCE$\" \"1\"\n        SHUTDOWN \"MM\"\n    ELSEIF EQU \"$COMP_MODE_MMCE$\" \"2\"\n        SET \"BM.AUTOLOAD_FSD_EN\" \"0\"\n    ELSEIF EQU \"$COMP_MODE_MMCE$\" \"3\"\n        SETBIOS \"OFF\"\n        SHUTDOWN \"ALL\"\n    ENDIF\n    GOTO \"RUN_COMP_MODE\"\n\n:RUN_USB\n    IF EQU \"$COMP_MODE_USB$\" \"1\"\n        SHUTDOWN \"MM\"\n    ELSEIF EQU \"$COMP_MODE_USB$\" \"2\"\n        SET \"BM.AUTOLOAD_FSD_EN\" \"0\"\n    ELSEIF EQU \"$COMP_MODE_USB$\" \"3\"\n        SETBIOS \"OFF\"\n        SHUTDOWN \"ALL\"\n    ENDIF\n    GOTO \"RUN_COMP_MODE\"\n\n:RUN_HDD_APA\n    IF EQU \"$COMP_MODE_HDD_APA$\" \"1\"\n        SHUTDOWN \"MM\"\n    ELSEIF EQU \"$COMP_MODE_HDD_APA$\" \"2\"\n        SET \"BM.AUTOLOAD_FSD_EN\" \"0\"\n    ELSEIF EQU \"$COMP_MODE_HDD_APA$\" \"3\"\n        SETBIOS \"OFF\"\n        SHUTDOWN \"ALL\"\n    ENDIF\n    GOTO \"RUN_COMP_MODE\"\n\n:RUN_DFFS\n    IF EQU \"$COMP_MODE_DFFS$\" \"1\"\n        SHUTDOWN \"MM\"\n    ELSEIF EQU \"$COMP_MODE_DFFS$\" \"2\"\n        SET \"BM.AUTOLOAD_FSD_EN\" \"0\"\n    ELSEIF EQU \"$COMP_MODE_DFFS$\" \"3\"\n        SETBIOS \"OFF\"\n        SHUTDOWN \"ALL\"\n    ENDIF\n    GOTO \"RUN_COMP_MODE\"\n\n:RUN_COMP_MODE\n    LOADEXEC \"PBAT\" \"$BM.SCRIPTS$/LOADEXEC.PBT\" \"$PWD$/$ELF$\"\n    EXIT 0\n</code></pre>"},{"location":"crystal-chips/cc-files/#appinfopbt-example-for-bmapps","title":"APPINFO.PBT Example for BM/APPS/","text":"APPINFO.PBT Example <pre><code># Change this information to describe the application.\nSET \"TITLE\" \"APP TITLE\"\nSET \"VERSION\" \"version here\"\nSET \"AUTHOR\" \"who made the app\"\nSET \"DESC\" \"Description of the app\"\nSET \"MEDIAS\" \"\"\n#\n\n# Do not change these 2 lines!\nGOTO \"$ARG1$\"\nRETURN \"-1\"\n\n:LABEL_NAME\n    ADDWIDGET \"LABEL\" \"$ARG2$$TITLE$ v$VERSION$\"\n    EXIT \"0\"\n\n:QUERY\n    ADDWIDGET \"CALL\" \"$TITLE$\" \"$BM.TXT_VERSION$: $VERSION$ $BM.TXT_AUTHOR$: $AUTHOR$ $BM.TXT_DESC$: $DESC$\" $ARG2$ \"$ARG0$\" \"$ARG3$\" \"$ARG4$\" \"$ARG5$\"\n    EXIT \"0\"\n\n:INSTALL\n    IF FAIL COPY \"$PWD$\" \"$ARG2$:/BM/APPS/APP_TITLE\"\n        MESSAGE \"Failed installing $TITLE$!\"\n        RRM \"$ARG2$:/BM/APPS/APP_TITLE\"\n        RETURN -1\n    ENDIF\n    EXIT 0\n\n:REMOVE\n    IF FAIL RRM \"$PWD$\"\n        MESSAGE \"Failed removing $TITLE$!\"\n        RETURN -1\n    ENDIF\n    EXIT 0\n\n:RUN\n#   SET \"BM.AUTOLOAD_FSD_EN\" \"0\"\n#   SHUTDOWN \"MM\"\n    LOADEXEC \"PBAT\" \"$BM.SCRIPTS$/LOADEXEC.PBT\" \"$PWD$/APPFILENAME.ELF\"\n    EXIT \"0\"\n</code></pre>"},{"location":"crystal-chips/cc-files/#appinfopbt-with-3-boot-options-example","title":"APPINFO.PBT with 3 Boot Options Example","text":"APPINFO.PBT Example w 3 Boot Options <pre><code># Change this information to describe the application.\nSET \"TITLE\" \"APP TITLE\"\nSET \"VERSION\" \"version here\"\nSET \"AUTHOR\" \"who made the app\"\nSET \"DESC\" \"Description of the app\"\nSET \"MEDIAS\" \"\"\n#\n\n# Do not change these 2 lines!\nGOTO \"$ARG1$\"\nRETURN \"-1\"\n\n:LABEL_NAME\n    ADDWIDGET \"LABEL\" \"$ARG2$$TITLE$ v$VERSION$\"\n    EXIT \"0\"\n\n:QUERY\n    ADDWIDGET \"CALL\" \"$TITLE$\" \"$BM.TXT_VERSION$: $VERSION$ $BM.TXT_AUTHOR$: $AUTHOR$ $BM.TXT_DESC$: $DESC$\" $ARG2$ \"$ARG0$\" \"$ARG3$\" \"$ARG4$\" \"$ARG5$\"\n    EXIT \"0\"\n\n:INSTALL\n    IF FAIL COPY \"$PWD$\" \"$ARG2$:/BM/APPS/APP_TITLE\"\n        MESSAGE \"Failed installing $TITLE$!\"\n        RRM \"$ARG2$:/BM/APPS/APP_TITLE\"\n        RETURN -1\n    ENDIF\n    EXIT 0\n\n:REMOVE\n    IF FAIL RRM \"$PWD$\"\n        MESSAGE \"Failed removing $TITLE$!\"\n        RETURN -1\n    ENDIF\n    EXIT 0\n\n:RUN\n    ADDWIDGET \"CALL\" \"$TITLE$ with SHUTDOWN\" \"Launch $TITLE$ with the SHUTDOWN Option\" \"$ARG0$\" \"RUN_WITH_OPTION\" \"1\"\n    ADDWIDGET \"CALL\" \"$TITLE$ with autoload of drivers OFF\" \"Launch $TITLE$ with the AUTOLOAD_FSD_EN option\" \"$ARG0$\" \"RUN_WITH_OPTION\" \"2\"\n    ADDWIDGET \"CALL\" \"$TITLE$ without any option\" \"Launch $TITLE$ without any option\" \"$ARG0$\" \"RUN_WITH_OPTION\" \"0\"\n    RETURN 0\n\n:RUN_WITH_OPTION\n    ECHO \"$ARG2$\"\n    SWITCH \"$ARG2$\"\n        CASE 1\n        #SHUTDOWN\n            ECHO \"SHUTDOWN\"\n            SHUTDOWN \"MM\"\n            BREAK\n        CASE 2\n        #DRIVERS ON\n            ECHO \"CC DRIVERS ON\"\n            SET \"BM.AUTOLOAD_FSD_EN\" \"0\"\n            BREAK\n        CASE 0\n        #NONE\n            DEFAULT\n            ECHO \"NONE\"\n            BREAK\n    ENDS\n\n    LOADEXEC \"PBAT\" \"$BM.SCRIPTS$/LOADEXEC.PBT\" \"$PWD$/WLE.ELF\"\n    EXIT 0\n</code></pre>"},{"location":"crystal-chips/cc-files/#to-do","title":"To Do","text":"<ul> <li> SAS support (Apps from root with prefixes IE mc?:/APP_WLE-ISR-EXFAT-MMCE or mc?:/APP_OPL-MMCE-BETA2)</li> <li> CC1.X Boot method failover IE try next memcard</li> <li> CC1.X BootManager boots from USB      Commented out in BM/FWS/LATEST/FWINFO.PBT for advanced users to use</li> <li> HDD IRXs not installed for V14 and later PS2s</li> </ul>"},{"location":"crystal-chips/cc-install/","title":"1.1+ Install Diagrams","text":""},{"location":"crystal-chips/cc-install/#install-diagrams","title":"Install Diagrams","text":"<p>Crystal Chip 1.0 Install Note</p> <p>Crystal Chip 1.0 may use these diagrams for v9 and later. Otherwise reference the 1.0 diagrams here.</p> <p>CC 1.0 does NOT use the TO (Tray Open) on v9 PS2s or later, and does NOT use the HA point for any install.</p> <p>SD point confusion</p> <p>No installs use the SD point on the Crystal Chip if it has it. (1.1 and later)</p>"},{"location":"crystal-chips/cc-install/#phat-ps2s","title":"Phat PS2s","text":""},{"location":"crystal-chips/cc-install/#v1-v2-gh-004","title":"V1 V2 GH-004","text":""},{"location":"crystal-chips/cc-install/#v1-v2-gh-005","title":"V1 V2 GH-005","text":""},{"location":"crystal-chips/cc-install/#v3","title":"V3","text":""},{"location":"crystal-chips/cc-install/#v4","title":"V4","text":""},{"location":"crystal-chips/cc-install/#v5-v6","title":"V5 V6","text":""},{"location":"crystal-chips/cc-install/#v7-v8","title":"V7 V8","text":""},{"location":"crystal-chips/cc-install/#v9","title":"V9","text":""},{"location":"crystal-chips/cc-install/#v10-v11","title":"V10 V11","text":""},{"location":"crystal-chips/cc-install/#slim-ps2s","title":"Slim PS2s","text":""},{"location":"crystal-chips/cc-install/#v12-gh-032-xx","title":"V12 GH-032-XX","text":""},{"location":"crystal-chips/cc-install/#v12-gh-035-xx","title":"V12 GH-035-XX","text":""},{"location":"crystal-chips/cc-install/#v14-gh-037-xx","title":"V14 GH-037-XX","text":""},{"location":"crystal-chips/cc-install/#v14-gh-041-03","title":"V14 GH-041-03","text":""},{"location":"crystal-chips/cc-install/#v14-gh-040-52","title":"V14 GH-040-52","text":""},{"location":"crystal-chips/cc-install/#v14-gh-040-52_1","title":"V14 GH-040-52","text":""},{"location":"crystal-chips/cc-install/#v14-gh-036-51","title":"V14 GH-036-51","text":""},{"location":"crystal-chips/cc-install/#v15-gh-051-02","title":"V15 GH-051-02","text":""},{"location":"crystal-chips/cc-install/#v15-gh-051-51","title":"V15 GH-051-51","text":""},{"location":"crystal-chips/cc-install/#v16a-gh-061-12s","title":"V16a GH-061-12S","text":""},{"location":"crystal-chips/cc-scripting/","title":"PBT Scripting","text":""},{"location":"crystal-chips/cc-scripting/#bootmanager-scripting-reference-list-pbat","title":"BOOTMANAGER Scripting Reference List (PBAT)","text":""},{"location":"crystal-chips/cc-scripting/#variables","title":"Variables","text":"<p>Variables are used to store values.</p> <p>To set a new variable, you have to specify the type :</p> <pre><code>SET \"STRING\" \"MY_VARIABLE\" \"Mod your life\"\n</code></pre> <p>Possible variable types are:</p> <ul> <li> <p><code>STRING</code> : string (assumed if the below types are not set)</p> </li> <li> <p><code>U8/S8</code> : Signed/Unsigned 8-bits number</p> </li> <li> <p><code>U16/S16</code> : Signed/Unsigned 16-bits number</p> </li> <li> <p><code>U32/S32</code> : Signed/Unsigned 32-bits number</p> </li> </ul> <p>Signed/Unsigned definition</p> <p>Signed numbers can be negatives, Unsigned can only be positives.</p> <p>Examples</p>"},{"location":"crystal-chips/cc-scripting/#set","title":"SET","text":"<p>To store a string or number</p> <pre><code>SET \"U8\" \"MY_DIGIT\" \"235\"\n</code></pre> <pre><code>SET \"S32\" \"MY_OTHER_DIGIT\" \"-3420\"\n</code></pre> <p>Once the type is set, you can assign a new value to the variable :</p> <pre><code>SET \"MY_DIGIT\" \"34\"\n</code></pre> <p>Call an existing variable</p> <p>To call an already defined variable, you have to surround it with <code>$</code> :</p> <pre><code>ECHO \"$MY_DIGIT$\"\n</code></pre> <p>will display <code>34</code> in the output console for example PS2Client.</p> <p>Where to save defined variables:</p> <p>The best place to define your variables and their types is in the file DEFCONF.PBT.</p> <p>If you want your variable to be saved in the configuration file of Boot Manager, the name MUST begin with \"BM.CNF\".</p> <pre><code>SET \"BM.CNF_MY_DEFINITION\" \"$MY_DIGIT$\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#unset","title":"UNSET","text":"<p>To remove a string or number</p> <pre><code>UNSET \"MY_DIGIT\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#savevars","title":"SAVEVARS","text":"<p>Save variables that start with <code>BM.CNF_</code></p> <pre><code>IF FAIL SAVEVARS \"BM.CNF_*\" \"$BM.BM_PATH$/CONFIG/BMCONF.PBT\"\n        MESSAGE \"$BM.TXT_SAVE_CONF_FAIL$\"\n    ELSE\n        SET \"BM.CONFIG_CHANGED\" \"0\"\n    ENDIF\n    GOTO \"MENU_MAIN\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#messages","title":"Messages","text":"<p>Messages can be displayed either on the output console, or in the TV screen.</p>"},{"location":"crystal-chips/cc-scripting/#echo","title":"ECHO","text":"<p>To output text to console (PS2Client)</p> <pre><code>ECHO \"The value of MY_DIGIT is : $MY_DIGIT$\"\n</code></pre> <p>will return the text and the contain of the variable in the output console which will be in most case the console where you launched ps2client.</p>"},{"location":"crystal-chips/cc-scripting/#message","title":"MESSAGE","text":"<p>To display text on the tv screen</p> <pre><code>MESSAGE \"Installation Complete!\"\n</code></pre> <p>will return the text <code>Installation Complete!</code> on the TV screen.</p> <p>Escaping characters</p> <p>You can escape a character with ^</p> <pre><code>MESSAGE \"The Crystal Chip is ^\"astonishing^\"\"\n</code></pre> <p>The ^ will tell the MESSAGE command not to interpret the \" next to it as the end of the string character.</p>"},{"location":"crystal-chips/cc-scripting/#widgets","title":"Widgets","text":"<p>Widgets is used to display menus in the screen. There are many Widget types to feet different needs.</p>"},{"location":"crystal-chips/cc-scripting/#addwidget","title":"ADDWIDGET","text":"<p>To display a menu item</p> <pre><code>ADDWIDGET \"LABEL\" \"Main Menu\"\n</code></pre> <p>Types of Widgets:</p>"},{"location":"crystal-chips/cc-scripting/#label","title":"LABEL","text":"<p>To display a title.</p> <pre><code>ADDWIDGET \"LABEL\" \"$TXT_LABEL$\"\n</code></pre> <p>will display a title line with the text contained in the variable TXT_LABEL.</p>"},{"location":"crystal-chips/cc-scripting/#int","title":"INT","text":"<p>To set a variable with a number</p> <pre><code>ADDWIDGET \"INT\" \"Title\" \"Description\" \"MY_NUMBER\" \"0\" \"99\" \"1\"\n</code></pre> <p>will display a widget to store a value between 0 and 99 in the variable MY_NUMBER. The user will be able to increment the number by 1.</p>"},{"location":"crystal-chips/cc-scripting/#axis","title":"AXIS","text":"<p>To set axis numbers (X,Y)</p> <pre><code>ADDWIDGET \"AXIS\" \"Title\" \"Description\" \"VALUE_X\" \"VALUE_Y\" \"0\" \"1920\" \"1\" \"0\" \"1920\" \"2\"\n</code></pre> <p>will display the widget which let the user to select a value for VALUE_X between 0 and 1920 with an increment of 1 and for VALUE_Y between 0 and 1920 with an increment of 2.</p>"},{"location":"crystal-chips/cc-scripting/#ip","title":"IP","text":"<p>To set an IP address</p> <pre><code>ADDWIDGET \"IP\" \"Title\" \"Description\" \"IP_ADDRESS_1\" \"IP_ADDRESS_2\" \"IP_ADDRESS_3\" \"IP_ADDRESS_4\"\n</code></pre> <p>to set variables IP_ADDRESS_1, IP_ADDRESS_2 etc. For example, if you wish to display this IP again, you'll have to call</p> <pre><code>ECHO \"THE IP ADDRESS YOU'VE ENTERED IS $IP_ADDRESS_1$.$IP_ADDRESS_2$.$IP_ADDRESS_3$.$IP_ADDRESS_4$\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#choice","title":"CHOICE","text":"<p>To display a choice to set a numerical value to a variable</p> <pre><code>ADDWIDGET \"CHOICE\" \"Title\" \"Description\" \"MY_CHOICE\"  \"CHOICE 1\" \"CHOICE 2\" \"CHOICE 3\"\n</code></pre> <p>will display a widget with the specified title and description (the description is displayed in the scroll bar), and will set the variable MY_CHOICE to \"0\", \"1\", or \"2\" depending of the user choice. <code>CHOICE</code> variables start with 0 and increment. <code>CHOICE 1</code> will be 0 when <code>$MY_CHOICE$</code> is recalled. <code>COICE 2</code> will be 1 and so forth.</p>"},{"location":"crystal-chips/cc-scripting/#call","title":"CALL","text":"<p>To call another section of the code</p> <pre><code>ADDWIDGET \"CALL\" \"Title\" \"Description\" \"$ARG0$\" \"THE_SECTION\" \"ARG2\" \"ARG3\"...\n</code></pre> <p>will call the section <code>THE_SECTION</code> of the file <code>$ARG0$</code> (<code>$ARG0$</code> will be the file where this widget is executed. The section THE_SECTION is inside the same file). with arguments <code>ARG2</code> and <code>ARG3</code>.</p> <p>The text <code>ARG2</code> and <code>ARG3</code> will be available in the section THE_SECTION by calling variables $ARG2$ and $ARG3$. (see Sections below)</p>"},{"location":"crystal-chips/cc-scripting/#switch","title":"SWITCH","text":"<p>When you have many case to treat, you can also use the <code>SWITCH</code> function. Will be used with <code>ADDWIDGET \"CALL\"</code> or <code>ADDWIDGET \"CHOICE\"</code> </p> <pre><code>SWITCH \"$BM.CNF_VMODE$\"\n    CASE 1\n    # PAL\n        SET \"BM.CNF_SCREEN_X\" \"0\"\n        SET \"BM.CNF_SCREEN_Y\" \"0\"\n        BREAK\n    CASE 2\n    # VGA\n        SET \"BM.CNF_SCREEN_X\" \"0\"\n        SET \"BM.CNF_SCREEN_Y\" \"0\"\n        BREAK\n    CASE 3\n    # 480P\n        SET \"BM.CNF_SCREEN_X\" \"0\"\n        SET \"BM.CNF_SCREEN_Y\" \"0\"\n        BREAK\n    CASE 0\n    # NTSC\n    DEFAULT\n        SET \"BM.CNF_SCREEN_X\" \"0\"\n        SET \"BM.CNF_SCREEN_Y\" \"0\"\n        BREAK\nENDS\n</code></pre> <p>You can see that the BREAK command is used to go out of the SWITCH as soon as a case has been treated. You can add DEFAULT to take in consideration this CASE if non corresponds.</p>"},{"location":"crystal-chips/cc-scripting/#color","title":"COLOR","text":"<pre><code>ADDWIDGET \"COLOR\" \"MYCOLOR\" \"Color Hint\" \"Variable\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#return","title":"RETURN","text":"<p>To return to a previous menu/script</p> <pre><code>ADDWIDGET \"RETURN\" \"$BM.TXT_DONE$\" \"$BM.TXT_RETURN_CONFIG$\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#other-widget-commands","title":"Other Widget Commands","text":""},{"location":"crystal-chips/cc-scripting/#clearwidgets","title":"CLEARWIDGETS","text":"<p>Will clear the screen of all widgets.</p> <pre><code>CLEARWIDGETS\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#settitle","title":"SETTITLE","text":"<p><code>SETTITLE</code> will set the title of the current screen.</p> <pre><code>SETTITLE \"Install App to...\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#eval","title":"EVAL","text":"<p>Used with <code>ADDWIDGET</code> and <code>SETTITLE</code> to evaluate nested variables</p> <pre><code>EVAL SETTITLE \"$$BM.TXT_$ARG2$_$ARG3$_FROM$$\"\n</code></pre> <pre><code>EVAL ADDWIDGET \"LABEL\" \"$$BM.TXT_$ARG3$$$\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#sections","title":"Sections","text":""},{"location":"crystal-chips/cc-scripting/#goto","title":"GOTO","text":"<p>A PBAT script is divided into sections. You can define a new section using the sign <code>:</code></p> <p>You can navigate thru sections with the GOTO command. </p> <p>Do NOT use GOTO to jump to a label which is within an IF statement! Doing so will result in script failure. </p> <p>GOTO does NOT support passing arguments/values!</p> <p>Here is a piece of code to understand how sections work :</p> <pre><code>GOTO \"MAIN_MENU\"\n\n:A_SECTION\n    ECHO \"We are in the A_SECTION section.\"\n\n:MAIN_MENU\n    ADDWIDGET \"INT\" \"Value to export\" \"Scroller Text\" \"THE_NUMBER\" \"0\" \"10\" \"1\"\n    ADDWIDGET \"CALL\" \"Go to Config Menu\" \"Scroller Text\" \"$ARG0$\" \"CONFIG_MENU\" \"$THE_NUMBER$\"\n\n:CONFIG_MENU\n    CLEARWIDGETS\n    MESSAGE \"The Number you choose was : $ARG2$\"\n</code></pre> <p>If this script is called, the section <code>MAIN_MENU</code> will be executed first because of the <code>GOTO</code>. In <code>MAIN_MENU</code>, the variable <code>$THE_NUMBER$</code> is choosen by the user and the code will jump to <code>CONFIG_MENU</code> with the variable exported.</p>"},{"location":"crystal-chips/cc-scripting/#conditions","title":"Conditions","text":""},{"location":"crystal-chips/cc-scripting/#if","title":"IF","text":"<p>All conditions will start with <code>IF</code>. There exists <code>ELSIF</code>, <code>ELSE</code> and must be terminated with <code>ENDIF</code>. See below for further usage.</p>"},{"location":"crystal-chips/cc-scripting/#equ-neq-gte-gt-lte-lt","title":"EQU, NEQ / GTE, GT, LTE, LT","text":"<p>Numerical Conditions</p> <ul> <li> <p><code>EQU</code> = Equal</p> </li> <li> <p><code>NEQ</code> = NOT Equal</p> </li> <li> <p><code>EQUC</code> = Equal ? (unknown...)</p> </li> <li> <p><code>NEQC</code> = NOT Equal ? (unknown...)</p> </li> <li> <p><code>GTE</code> = Greater than or equal</p> </li> <li> <p><code>GT</code> = Greater than</p> </li> <li> <p><code>LTE</code> = Less than or equal</p> </li> <li> <p><code>LT</code> = Less than or equal</p> </li> </ul> <pre><code>IF EQU \"$MY_VARIABLE$\" \"1\"\n    MESSAGE \"The Variable was equal to 1\"\nELSE\n    MESSAGE \"The Variable was not equal to 1\"\nENDIF\n</code></pre> <p>You can also turn this code differently:</p> <pre><code>IF NEQ \"$MY_VARIABLE$\" \"0\"\n    MESSAGE \"The Variable was not equal to 0\"\nELSE\n    MESSAGE \"The Variable was equal to 0\"\nENDIF\n</code></pre> <p>You can evaluate if a number is larger or less than or equal another variable:</p> <pre><code>IF GTE \"$BM.BIOS_MAJOR_VER$$BM.BIOS_MINOR_VER$\" \"220\"\n    MESSAGE \"Unit is SCPH-75k or later and does not support HDD!\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#exists","title":"EXISTS","text":"<p>To know if a file/folder exists or not. This command should be used in a IF statement</p> <pre><code>IF EXISTS \"mc0:/MYFOLDER/MYSCRIPT.PBT\"\n    COPY \"mc0:/MYFOLDER/MYSCRIPT.PBT\" \"mass:/MYFOLDER/MYSCRIPT.PBT\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#matches","title":"MATCHES","text":"<p>To know if a STRING matches or not. This command should be used in a IF statement. If a wildcard is used, best to use it in first part of comparison. Second comparison should have NO wildcards.</p> <pre><code>IF MATCHES \"SCPH-300*\" \"$BM.CONSOLE_MODEL$\"\n    MESSAGE \"Console is SCPH-300XX\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#fail","title":"FAIL","text":"<p>Combine with other file manipulation commands, conditions or <code>LOADEXEC</code> or <code>LOADSRAM</code>. There may be more...</p> <pre><code>IF FAIL COPY \"mass:/MYFOLDER\" \"mc0:/MYFOLDER\n    MESSAGE \"Failed to copy MYFOLDER\"\n    IF FAIL RRM \"mc0:/MYFOLDER\"\n        MESSAGE \"Failed to remove mc0:/MYFOLDER!\"\n        RETURN -1\n    ENDIF\nENDIF\"\n</code></pre> <pre><code>IF NOT FAIL COPY \"mc0:/BOOT\" \"mc1:/BOOT\"\n    MESSAGE \"Successfully copied ^\"mc0:/BOOT^\" to ^\"mc1:/BOOT^\"!\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#modloaded","title":"MODLOADED","text":"<p>Detemines if IRX is loaded. Unsure how to find names of loaded IRX as is not ELF name.</p> <pre><code>IF NOT MODLOADED \"dev9_driver\"\n    IF FAIL LOADEXEC \"IRX\" \"$BM.DRIVER_PATH$/PS2DEV9.IRX\"\n        ECHO \"Failed loading PS2DEV9.IRX!\"\n        RETURN -1\n    ENDIF\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#isin","title":"ISIN","text":"<p>Determines if text is within a file.</p> <pre><code>IF ISIN \"MY_FILE.TXT\" \"HELLO_WORLD\"\n    MESSAGE \"HELLO WORLD!\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#not","title":"NOT","text":"<p>Combine with <code>IF</code>/<code>ELSEIF</code> and another condition.</p> <pre><code>IF NOT EXISTS \"mc0:/SYS-CONF/IPCONFIG.DAT\"\n    FPRINT \"mc0:/SYS-CONF/IPCONFIG.DAT\" \"192.168.0.10\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#elseif-else","title":"ELSEIF / ELSE","text":"<p>You can imbricate more than one IF with the keyword <code>ELSIF</code> :</p> <pre><code>IF EQU \"$MY_VARIABLE$\" \"1\"\n    MESSAGE \"The Variable was equal to 1\"\nELSEIF EQU \"$MY_VARIABLE$\" \"2\"\n    MESSAGE \"The Variable was equal to 2\"\nENDIF\n</code></pre> <p>You'll use the <code>ELSEIF</code> statement when you want to keep testing for values.</p> <p>You will use the <code>ELSE</code> statement when none are true, the last ELSE will be executed.</p> <pre><code>IF EQU \"$MY_VARIABLE$\" \"1\"\n    MESSAGE \"The Variable was equal to 1\"\nELSE \n    MESSAGE \"The Variable was something other than 1\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#endif","title":"ENDIF","text":"<p>Any condition starting with <code>IF</code> must have an <code>ENDIF</code></p> <pre><code>IF\nELSEIF\nELSEIF\nELSE\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#file-manipulation","title":"File Manipulation","text":"<p>File manipulation is useful for installation scripts (in APPINFO.PBT). You can manipulate files on any device :</p> <ul> <li><code>mc0</code> (for memory card 1)</li> <li><code>mc1</code> (for memory card 2)</li> <li><code>mass</code> (for USB device)</li> <li><code>mmce0</code> (for MMCE device 1)</li> <li><code>mmce0</code> (for MMCE device 2)</li> <li><code>pfs0</code> (for internal HDD, uses __common partition)</li> <li><code>dffs</code> (for internal Chip flash memory CC 2.0 ONLY, don't forget 1.1/1.2 can be turned into 2.0!)</li> <li><code>host</code> (for remote host. Only available if ps2client is launched on the PC and the network and the host server are started on Boot Manager) </li> </ul> <p>Combine the below commands with <code>IF FAIL</code> and <code>ELSEIF FAIL</code> for error handling.</p>"},{"location":"crystal-chips/cc-scripting/#copy","title":"COPY","text":"<p>To copy file/directory from source to destination :</p> <pre><code>COPY \"host:/FOLDER\" \"mass:/FOLDER/FOLDER2\"\n</code></pre> <p>will copy contents source folder to destintaion folder if intermediary folders exist.</p> <pre><code>COPY \"host:/FOLDER1/FILE.TXT\" \"mass:/FOLDER1/FOLDER2/FILE.TXT\"\n</code></pre> <p>will copy the single file, but will NOT create destination folder structure if it does not exist.</p> <p>Notes: copying a file to a file only works if prior directories already exist on destination.</p> <pre><code>COPY \"host:/FOLDER\" \"mass:/FOLDER1NOTEXISTS/FOLDER2/FILE.TXT\"\n</code></pre> <p>^DOES NOT WORK!</p> <pre><code>COPY \"host:/FOLDER\" \"mass:/FOLDER1NOTEXISTS/FOLDER2/\"\n</code></pre> <p>This does work to create an empty <code>mass:/FOLDER1</code> but will say it fails if used with <code>IF COPY FAIL</code>. Note the ending <code>/</code></p>"},{"location":"crystal-chips/cc-scripting/#rmrrm","title":"RM/RRM","text":"<p>To delete a file or directory</p> <p><code>RM</code> Remove</p> <p><code>RRM</code> Recursive Remove</p> <pre><code>RRM \"mc0:/TMPFOLDER\"\n</code></pre> <p>Most likely same script as informed by Crystal Chip Team since there is little reason for RM to exist.</p>"},{"location":"crystal-chips/cc-scripting/#format","title":"FORMAT","text":"<p>To erase file system and initialize Memory Card or Crystal Chip flash</p> <pre><code>FORMAT \"dffs:/\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#mkdir","title":"MKDIR","text":"<p>To create a new folder.</p> <pre><code>MKDIR \"mass:/MYFOLDER\"\n</code></pre> <p>will create a folder MYFOLDER in the USB mass storage.</p> <p>Note: MKDIR will not create mutliple folders for example if MYFOLDER, FOLDER and FOLDER3 do not exist:</p> <pre><code>IF NOT EXISTS \"mass:/MYFOLDER/FOLDER2/FOLDER3\"\n    IF FAIL MKDIR \"mass:/MYFOLDER/FOLDER2/FOLDER3\"\n        MESSAGE \"FAILED TO CREATE DIRECTORY!\"\n    ENDIF\nENDIF\n</code></pre> <p>The workaround is to exploit a bug that thinks it failed</p> <pre><code>COPY $PWD$ \"mass:/MYFOLDER/MYFOLDER2/MYFOLDER3\"\n</code></pre> <p>DO NOT PRECEDE WITH <code>IF FAIL</code> as it does think it failed. Contents of folders will not be harmed in my testing if some of it exists.</p>"},{"location":"crystal-chips/cc-scripting/#redirfile","title":"REDIRFILE","text":"<p>To symlink a file to another location. Only works if the environment you use doesn't reboot IOP too soon IE PS2LINK</p> <pre><code>REDIRFILE \"$PWD$/IPCONFIG.DAT\" \"$BM.BM_PATH$/CONFIG/IPCONFIG.DAT\"\n</code></pre> <p><code>\"$PWD$/IPCONFIG.DAT\"</code> is where you want the file to \"appear\" and <code>\"$BM.BM_PATH$/CONFIG/IPCONFIG.DAT\"</code> is where the file currently resides.</p>"},{"location":"crystal-chips/cc-scripting/#unmount","title":"UNMOUNT","text":"<p>To unmount a device such as HDD</p> <pre><code>UNMOUNT \"pfs0:\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#fprint","title":"FPRINT","text":"<p>To write out text into a file.</p> <pre><code>FPRINT \"mass:/MY_TEXT.TXT\"  \"This text will be written into MY_TEXT.TXT.\"\n</code></pre> <p>Be careful, if the file exists already, the content will be replaced though a bug does exist where text is appended instead of file replaced especially if file has line breaks.</p>"},{"location":"crystal-chips/cc-scripting/#executing-and-passing-variables-between-sectionsscripts","title":"Executing and passing variables between sections/scripts","text":"<p>To call/execute another section of the same or different script, elf or irx and pass variables or args as <code>ARG1</code>-<code>ARGX</code></p> <pre><code>LOADEXEC \"TYPE\" \"ARG0\" \"ARG1\" \"ARG2\"\n</code></pre> <p>Will execute a \"TYPE\" of loadexec: <code>PBAT</code>,<code>PBATS</code> <code>EEELF</code>, <code>IRX</code></p>"},{"location":"crystal-chips/cc-scripting/#pbat","title":"PBAT","text":"<p>To execute another PBAT script and pass variables.</p> <pre><code>LOADEXEC \"PBAT\" \"MY_FILE.PBT\" \"MY_ARGUMENT1\" \"MY_ARGUMENT2\"\n</code></pre> <p>will execute a PBAT file named MY_FILE.PBT and GOTO section \"MY_ARGUMENT1\" (ARG1) with \"MY_ARGUMENT2\" set as variable ARG2. Most of the time, you'll specify a section of the same PBAT script to be executed as the argument. </p> <p>In the called script, MY_ARGUMENT2 will be the first variable in the afformentioned called script, which can be recalled in said script with $ARG2$</p>"},{"location":"crystal-chips/cc-scripting/#pbats","title":"PBATS","text":"<p>To execute multiple PBAT scripts and pass variables.</p> <pre><code>LOADEXEC \"PBATS\" \"MY_*.PBT\" \"MY_ARGUMENT1\" \"MY_ARGUMENT2\"\n</code></pre> <p>PBATS is usually used to call multiple scripts to print APPS,DEVS,THEMS,LANGS to screen as choices. In the called PBAT GOTO section will most likely be <code>ADDWIDGET \"CALL\"</code>...to pass ARGS back to this script.</p> <p>In the called script, MY_ARGUMENT2 will be the first variable in the afformentioned called script, which can be recalled in said script with $ARG2$</p>"},{"location":"crystal-chips/cc-scripting/#eeelf","title":"EEELF","text":"<p>To execute an ELF file and pass arguments.</p> <pre><code>LOADEXEC \"EEELF\" \"MY_FILE.ELF\" \"MY_ARGUMENT1\" \"MY_ARGUMENT2\"\n</code></pre> <p>will execute MY_FILE.ELF with MY_ARGUMENT1 and MY_ARGUMENT2 passed to the elf should it support arg(v).</p>"},{"location":"crystal-chips/cc-scripting/#irx","title":"IRX","text":"<p>To load a an IRX module. Most IRXs do not support arg(v).</p> <pre><code>LOADEXEC \"IRX\" \"MY_FILE.IRX\"\n</code></pre> <p>will execute an IRX (device driver usually) to add functionality to BOOTMANAGER. Most IRXs do not support arg(v).</p>"},{"location":"crystal-chips/cc-scripting/#wildcards","title":"Wildcards","text":"<ul> <li> <p><code>*</code> wildcard(s)</p> </li> <li> <p><code>?</code> single character wildcard</p> </li> </ul> <p>When used with conditions, be sure to set in first variable.</p> <p>Also used often to call multiple PBATS via <code>LOADEXEC \"PBATS\"</code> to show apps/devices avaliable.</p> <pre><code>IF MATCHES \"SCPH-300*\" \"$BM.CONSOLE_MODEL$\"\n    MESSAGE \"Console is SCPH-300XX\"\nENDIF\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#keeping-script-in-memory","title":"Keeping Script in Memory","text":""},{"location":"crystal-chips/cc-scripting/#keep","title":"KEEP","text":"<p>Loads script in ram for quicker recall</p> <pre><code>KEEP\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#return_1","title":"RETURN","text":"<p>Remove the script from memory if the return value is &lt;0</p> <pre><code>RETURN 0\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#exit","title":"EXIT","text":"<p>Exit from the script (0 )and do not keep it in memory (-1)</p> <pre><code>EXIT 0\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#killsess","title":"KILLSESS","text":"<p>I believe to exit a script and not keep in memory FROM another script that is currently \"running\". Reference BM/SCRIPTS/BMMENUS.PBT</p> <pre><code>KILLSESS \"$BM.SCRIPTS$/CONFMENU.PBT\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#skipback","title":"SKIPBACK","text":"<p>When returning from a submenu, this menu is skipped(ie returns to the menu before this menu).</p> <pre><code>SKIPBACK\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#theme-specific","title":"Theme Specific","text":""},{"location":"crystal-chips/cc-scripting/#loadimgunloadimg","title":"LOADIMG/UNLOADIMG","text":"<p>Load and unload an image for a theme</p> <pre><code>LOADIMG \"mc0:/BM/THMS/MYTHEME/IMAGE.BMP\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#pre-defined-variables","title":"Pre-Defined Variables","text":""},{"location":"crystal-chips/cc-scripting/#parsepath","title":"PARSEPATH","text":"<p>To be able to recall specifc parts or whole path of script.</p> <pre><code>PARSEPATH \"$PWD$\" \"SRC_DEV\" \"SRC_PATH\" \"SRC_FILE\" \n</code></pre> <p>Will let you call Path working directory, source device, source path and source file.</p> <p>Note: you can always call <code>$PWD$</code>, but the others require <code>PARSEPATH</code> to define and recall.</p>"},{"location":"crystal-chips/cc-scripting/#crystal-chip-info","title":"Crystal Chip Info","text":"<ul> <li> <p><code>$BM.MAJOR_VER$</code> - BootManager major version</p> </li> <li> <p><code>$BM.MINOR_VER$</code> - BootManager minor version</p> </li> <li> <p><code>$BM.PATCH_VER$</code> - BootManager patch version</p> </li> <li> <p><code>$BM.CC_MAJOR_VER$</code> - Crystal Chip major version</p> </li> <li> <p><code>$BM.CC_MINOR_VER$</code> - Crystal Chip minor version</p> </li> <li> <p><code>$BM.BM_PATH$</code> - Path to root BM folder ie device:/BM Note there is no <code>/</code> included</p> </li> <li> <p><code>$BM.SCRIPTS$</code> - Path to BOOTMANAGER scripts folder. Typically device:/BM/SCRIPTS Note there is no <code>/</code> included</p> </li> <li> <p><code>$BM.DRIVER_PATH$</code> - Path to SHARED folder. Typically device:/BM/SHARED Note there is no <code>/</code> included</p> </li> </ul>"},{"location":"crystal-chips/cc-scripting/#ps2-info","title":"PS2 Info","text":"<ul> <li> <p><code>$BM.CONSOLE_MODEL$</code> - PS2 Console model IE SCPH-70012 (best model!)</p> </li> <li> <p><code>$BM.CONSOLE_REGION$</code> - PS2 Console Region</p> </li> <li> <p><code>$BM.BIOS_MAJOR_VER$</code> - PS2 BOOTROM major version</p> </li> <li> <p><code>$BM.BIOS_MINOR_VER$</code> - PS2 BOOTROM minor version</p> </li> <li> <p><code>$BM.ROMVER_REGION$</code> - PS2 BOOTROM Region</p> </li> <li> <p><code>$BM.MECHA_REGION$</code> - PS2 Mechacon Region</p> </li> </ul>"},{"location":"crystal-chips/cc-scripting/#compatibility-cmds","title":"Compatibility CMDs","text":""},{"location":"crystal-chips/cc-scripting/#setauth","title":"SETAUTH","text":"<p>Set disc type forced authentication:</p> <ul> <li> <p><code>OFF</code></p> </li> <li> <p><code>PS1</code></p> </li> <li> <p><code>PS2</code></p> </li> </ul> <pre><code>SETAUTH \"PS2\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#setbios","title":"SETBIOS","text":"<p>Set the bios pathes type:</p> <ul> <li> <p><code>OFF</code></p> </li> <li> <p><code>PS1</code></p> </li> <li> <p><code>PS2</code></p> </li> </ul> <pre><code>SETBIOS \"PS2\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#shutdown","title":"SHUTDOWN","text":"<p>Shutdown portions of how Crystal Chips work:</p> <ul> <li> <p><code>ALL</code></p> </li> <li> <p><code>MM</code> - Memory Module</p> </li> <li> <p><code>MMIOP</code> - Memory Module on IOP</p> </li> </ul> <pre><code>SHUTDOWN \"MM\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#file-system-driver-autoload","title":"File System Driver Autoload","text":"<p>Do not autoload file system drivers after app launch</p> <p><code>SET \"BM.AUTOLOAD_FSD_EN\" \"0\"</code></p>"},{"location":"crystal-chips/cc-scripting/#memory-manipulation","title":"Memory Manipulation","text":""},{"location":"crystal-chips/cc-scripting/#peekpoke","title":"PEEK/POKE","text":"<p><code>PEEK</code> = look at ram addreess and store as value, <code>POKE</code> = insert value at ram address.</p> <p><code>PEEKB</code>, <code>PEEKH</code>, <code>PEEKW</code>, <code>POKEB</code>, <code>POKEH</code>, <code>POKEW</code></p> <ul> <li> <p><code>B</code> - Byte</p> </li> <li> <p><code>H</code> - Half Word</p> </li> <li> <p><code>W</code> - Word</p> </li> </ul> <pre><code>PEEKB \"0x1F40200F\" \"MY_VAR_NAME\"\n</code></pre> <p>Reference BM/DEVS/CDVD/DEVINFO.PBT</p> <pre><code>POKEW \"0x00101234\" \"0x12\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#cdvd-commands","title":"CDVD Commands","text":""},{"location":"crystal-chips/cc-scripting/#getdisktype","title":"GETDISKTYPE","text":"<p>Gets disk type as hex value \"0xXX\"</p> <pre><code>GETDISKTYPE \"DISK_TYPE\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#parscnf","title":"PARSCNF","text":"<p>Parses CNF file on root of disk to store as variable. Reference BM/SCRIPTS/BMCONT.PBT</p> <pre><code>PARSECNF \"cdrom0:\\SYSTEM.CNF\" \"BM.BOOT_TYPE\" \"BM.BOOT_NAME\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#cycletray","title":"CYCLETRAY","text":"<p>Causes the CDVD drive to recheck the disc. Parameters can be <code>WAIT</code>, <code>NOWAIT</code> or nothing (which is the same as <code>WAIT</code>). <code>WAIT</code> means \"wait until disc has authenticated and fail if disc does not authenticate\". <code>NOWAIT</code> returns immediately after telling the CDVD drive to reauthenticate.</p> <pre><code>CYCLETRAY \"WAIT\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#loadsram","title":"LOADSRAM","text":"<p>Used to pass PS1 logo check without displaying logo</p> <pre><code>LOADSRAM \"mc0:/BOOT/BM/PS1LOGO.BIN\"\n</code></pre> <p>For BOOTROM 2.00 and lower (SCPH-700XX or earlier)</p> <pre><code>LOADSRAM \"mc0:/BOOT/BM/PS1LOGO2.BIN\"\n</code></pre> <p>For BOOTROM 2.20 and greater (SCPH-750XX or later)</p>"},{"location":"crystal-chips/cc-scripting/#reboot-iop-and-reload-modules","title":"Reboot IOP and reload modules","text":""},{"location":"crystal-chips/cc-scripting/#rebootiop","title":"REBOOTIOP","text":"<p>Reboot IOP and reload modules</p> <pre><code>REBOOTIOP \"rom0:UDNL rom0:OSDCNF\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#needs-documentation-and-testing","title":"Needs documentation and testing:","text":"<p>SETENV - \"SETENV\" allows you to create a variable which are shared with all sessions: <code>SETENV \"MY_SHARED_VAR\" \"My shared value\"</code> DOES THIS STILL EXIST? </p>"},{"location":"crystal-chips/cc-scripting/#found-by-running-bmelf-in-pcsx2-and-looking-at-memory","title":"Found by running BM.ELF in PCSX2 and looking at memory.","text":"<p>Need to test these to document properly as they are not documented at all. Found in RAM by running BM2.ELF in PCSX2</p> <p><code>GETDVDREG</code>, <code>EXECCMD</code>, <code>CC</code>, <code>ILLEGAL</code>, <code>CDSTOP</code>, <code>GETDVDREG</code>, <code>BGCOLOR</code>, <code>SETBACK</code>, <code>SETEXIT</code>, <code>LIBLOADED</code>, <code>TOUCH</code>, <code>ADDMACRO</code>, <code>BOOT</code>, <code>DUMPIOP</code>, <code>DISCONNECT</code>, <code>FINDPAD</code>, <code>FINDCTP1</code>, <code>EXECMD</code>, <code>STABLE</code>, <code>ERROR</code>, <code>COMPLETE</code>, <code>FAILED</code>, <code>BUSY</code></p>"},{"location":"crystal-chips/cc-scripting/#debugging","title":"Debugging","text":""},{"location":"crystal-chips/cc-scripting/#use-echo-and-ps2-client","title":"Use ECHO and PS2 Client","text":"<p>When debugging paste ECHO where you want in the script. Then run PS2Client to see output via ECHO</p> <pre><code>    ECHO \"\"\n    ECHO \"\"\n    ECHO ARG0: $ARG0$\n    ECHO ARG1: $ARG1$\n    ECHO ARG2: $ARG2$\n    ECHO ARG3: $ARG3$\n    ECHO ARG4: $ARG4$\n    ECHO ARG5: $ARG5$\n    ECHO ARG6: $ARG6$\n    ECHO ARG7: $ARG7$\n    ECHO ARG8: $ARG8$\n    ECHO ARG9: $ARG9$\n    ECHO ARG10: $ARG10$\n    ECHO ARG11: $ARG11$\n    ECHO ARG12: $ARG12$\n    ECHO \"\"\n    ECHO \"\"\n</code></pre>"},{"location":"crystal-chips/cc-scripting/#ps2client","title":"PS2Client","text":"<p>Paste and edit this text into plain text file saved as LauchBM2.bat</p> <pre><code>ps2client -h 192.168.0.10 execee host:/BM/BM2.ELF\n</code></pre> <p>In the folder that has PS2Client, paste your BM folder</p> <p>You can then edit the scripts, and reload menu on Crystal Chip BootManager to see your changes. I recommend to comment out scripts with KEEP for quick testing, though that may break things like PIN testing or adjusting Theme Configurations.</p>"},{"location":"crystal-chips/cc-vids/","title":"Video Tutorials","text":""},{"location":"crystal-chips/cc-vids/#crystal-chip-1-firmware-and-bootmanager-install-with-cd","title":"Crystal Chip 1: Firmware and BootManager install with CD","text":""},{"location":"crystal-chips/cc-vids/#crystal-chip-2-installing-running-and-removing-apps-autloload-hotkeys-and-security","title":"Crystal Chip 2: Installing Running and Removing Apps. Autloload, Hotkeys and Security","text":""},{"location":"crystal-chips/cc-vids/#crystal-chip-r34-v3-changes-1-16-2024","title":"Crystal Chip: R34 V3 Changes 1-16-2024","text":""},{"location":"crystal-chips/cc-vids/#crystal-chip-r34-v4-changes-5-17-2025","title":"Crystal Chip: R34 V4 Changes 5-17-2025","text":""},{"location":"crystal-chips/cc-writeups/","title":"Written Tutorials","text":""},{"location":"crystal-chips/cc-writeups/#hotkeys","title":"Hotkeys","text":"Crystal Chip Hotkeys <p>Hotkeys can be set to ANY selectable menu item known as a \"widget\". This is done via BootManager software, NOT firmware (unless someone helps me add that as a feature). This means BootManager MUST be installed to define hotkeys whilst in BM.</p>"},{"location":"crystal-chips/cc-writeups/#boot-modes","title":"Boot Modes","text":"<p>Each press of the reset button is about once per second, after every blink on Slims.</p> <ul> <li> <p>Recovery Mode: Reset 3x</p> </li> <li> <p>Disable Chip: Reset 6x</p> </li> </ul>"},{"location":"crystal-chips/cc10-install/","title":"1.0 Install Diagrams","text":""},{"location":"crystal-chips/cc10-install/#cc-10-install-diagrams","title":"CC 1.0 Install Diagrams","text":"<p>Crystal Chip 1.0 Install Note</p> <p>Crystal Chip 1.0 uses a different TO point on v1-v8 than CC 1.1 and later.</p> <p>Officially CC 1.0 does NOT use the TO (Tray Open) on v9 PS2s or later, and does  NOT use the HA point for any install. However I have found the TO point (TRAYSW_OUT) in the schematics. I have updated V9/V10 with the TO point, and plan on doing so for V12. V12 is found as well and will add here when complete.  Note added 05/2025</p> <p>For installs in V12 and later reference the CC 1.1 and later diagrams.</p> <p>SD point confusion</p> <p>No installs use the SD point on the Crystal Chip if it has it. (1.1 and later)</p>"},{"location":"crystal-chips/cc10-install/#phat-ps2s","title":"Phat PS2s","text":""},{"location":"crystal-chips/cc10-install/#v1-v2-gh-004","title":"V1 V2 GH-004","text":""},{"location":"crystal-chips/cc10-install/#v1-v2-gh-005","title":"V1 V2 GH-005","text":""},{"location":"crystal-chips/cc10-install/#v3","title":"V3","text":""},{"location":"crystal-chips/cc10-install/#v4","title":"V4","text":""},{"location":"crystal-chips/cc10-install/#v5-v6","title":"V5 V6","text":""},{"location":"crystal-chips/cc10-install/#v7-v8","title":"V7 V8","text":""},{"location":"crystal-chips/cc10-install/#v9-gh-023","title":"V9 GH-023","text":""},{"location":"crystal-chips/cc10-install/#v10-v11-gh-026-gh-029","title":"V10 V11 GH-026 GH-029","text":""},{"location":"crystal-chips/cc10-install/#slim-ps2s","title":"Slim PS2s","text":""},{"location":"crystal-chips/cc10-install/#v12-gh-032-gh-035-incoming","title":"V12 GH-032 GH-035 Incoming","text":"<p>TO Point found, manual incoming</p>"},{"location":"dms3/","title":"Placeholder. Will probablly be last chip(s) to be updated","text":""},{"location":"dms3/#placeholder-will-probablly-be-last-chips-to-be-updated","title":"Placeholder. Will probablly be last chip(s) to be updated","text":"<p>============================ ChangeLog for DMS3 Hardware: ============================</p>"},{"location":"dms3/#plus-2004-06-30","title":"Plus (2004-06-30)","text":"<ul> <li>Reduced wire count</li> <li>Compatible with V1-V10 consoles from Japan/Asia, Europe/UK and USA/Canada.</li> <li>Eliminated GND bounce problems which affected some V3, V4 and V9 consoles.</li> <li>Faster and more reliable flash upgrade process, 97% success rate on first attempt.</li> <li>DVD-RW and +RW require 1 wire extra to be soldered.</li> </ul>"},{"location":"dms3/#v9-2003-11-16","title":"v9 (2003-11-16)","text":"<p>NOTE: This version is only compatible with model numbers that begin with 500xxx, aka v9 and v10 consoles.</p> <ul> <li>Internal logic got redesigned</li> <li>Works now even more reliable and more stable as before</li> </ul>"},{"location":"dms3/#v20-2003-03-18","title":"v2.0 (2003-03-18):","text":"<ul> <li>Removes the v8 DVD-R check (DVD recordable protection)</li> <li>Fixing disc authentication for incorrectly mastered PS2 discs (some DVD Rips)</li> </ul>"},{"location":"dms3/#v10-2003-02-17","title":"v1.0 (2003-02-17)","text":"<ul> <li>Initial release, first batch came with a upgrade CD that upgraded the flash to v1.1</li> </ul> <p>DMS3 operation and configuration tips Note: Configuration Menu is only supported in flash version 2.0 or higher. Dev.olution Mode 2 is only supported in flash version 1.8 or higher.</p> <p>DMS3 Startup Modes: </p> <p>PS2 - X PSX - O - Circle DVD - # - Square DEV1 - / - Triangle - Load DMS3 Explorer from memcard DEV2 - START - Load DMS3 HDD Explorer from HDD</p> <p>Fast Boot:</p> <p>Hold SELECT upon startup</p> <p>Stealth Mode/Disabled - Audio Mode:</p> <p>Hold eject for more than 1 second</p> <p>Flash Upgrade Disc:</p> <p>L1+L2+R1+R2 - Erase upgraded flash block, overwrite with factory firmware</p> <p>Boot Factory Flash:</p> <p>3 x Reset - Press reset 3 times, once every time the eject and reset lights up - Temporarily reverts back to original DMS3 firmware</p> <p>Configuration Menu: (Credit to dms forum) Default Boot:</p> <p>devolution 1 -&gt; dms explorer v1 (mc version) devolution 2 -&gt; dms explorer v2 (hd version) Normal -&gt; need explaining? (start the mod into ps2 mode with the normal ps2 boot screen) Fast boot -&gt; like normal but this make the ps2 boot screen don't showing up and going directly to the game MM16 Enabled:</p> <p>ON -&gt; you can use the mega memory 16 card (from datel) without booting the games with megamemory manager (from datel and with the card) OFF -&gt; you can't use the megamemory 16 card without booting the games with megamemory manager PS2 Video Fix Colour:</p> <p>None -&gt; what is outputted from the game itself (ntsc for ntsc games, pal for pal games colour carrier -&gt; change only the color so without a multi standard tv but with a tv capable to don't rolling the image you can see color and have the original resolution and HZ of the original game video mode -&gt; change the mode into the native mode of the console (pal for pal console, ntsc for ntsc console) this is like pacthing games with pacthing utilities and then burning it PSX video fix enabled:</p> <p>on -&gt; activates the video fix also for psx games and not only for ps2 games off -&gt; deactivates video fix also for psx games</p> <p>ATAD auto-pacth enabled:</p> <p>In order to use a non-Sony HDD with HDD-enabled games, you must first enable the ATAD auto patching.</p>"},{"location":"dms4/","title":"Overview","text":""},{"location":"dms4/#overview","title":"Overview","text":"<ul> <li> <p>DMS4 Lite</p> <p></p> <p>v1-v10 Phat PS2 Models ONLY</p> </li> <li> <p>DMS4 Pro</p> <p></p> <p>v1-v10 Phat PS2 Models ONLY</p> </li> </ul> <ul> <li> <p>DMS4 SE Lite</p> <p></p> <p>v1-v10 Phat PS2</p> <p>v12-v14 Slim PSTwo</p> </li> <li> <p>DMS4 SE Pro</p> <p></p> <p>v1-v10 Phat PS2</p> <p>v12-v14 Slim PSTwo</p> </li> </ul>"},{"location":"dms4/#dms4-documentation-progress","title":"DMS4 Documentation Progress","text":"Progress as of 3/3/2025 <ul> <li> DMS4 documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware, Toxic Config/OS</li> <li> Adding apps</li> </ul> </li> <li> Written Tutorials</li> <li> Files<ul> <li> Recovery CDs</li> <li> Toxic OS</li> </ul> </li> <li> Archived Websites</li> </ul> </li> </ul>"},{"location":"dms4/dms4-archived/","title":"Archived Website","text":""},{"location":"dms4/dms4-archived/#dms34-archived-website","title":"DMS3/4 Archived Website","text":""},{"location":"dms4/dms4-files/","title":"Team Files","text":""},{"location":"dms4/dms4-files/#firmware","title":"Firmware","text":"<p> Offical Flash v0.6 ALL DMS4 modchips</p> <p> Toxic BIOS 1.4 ALL DMS4 Modchips</p> <p> Toxic OS v0.41 DMS4 Pro and DMS4 SE Pro</p> <p> Toxic OS Manual</p>"},{"location":"dms4/dms4-files/#usb-driver-for-toxic-os","title":"USB Driver for Toxic OS","text":"<p> USB Drivers DMS4 Pro and DMS4 SE Pro</p>"},{"location":"dms4/dms4-files/#ps2-homebrew","title":"PS2 Homebrew","text":"<p>Click HERE for MMCE VMC downloads. These are ready to go for you! (Multipurpose Memory Card Emulator Virtual Memory Cards)</p>"},{"location":"dms4/dms4-install/","title":"Install Diagrams","text":""},{"location":"dms4/dms4-install/#phat-ps2s","title":"Phat PS2s","text":""},{"location":"dms4/dms4-install/#v1-v2-gh-04","title":"V1 V2 GH-04","text":""},{"location":"dms4/dms4-install/#v1-v2-gh-05","title":"V1 V2 GH-05","text":""},{"location":"dms4/dms4-install/#v3-gh-06-gh-07","title":"V3 GH-06 GH-07","text":""},{"location":"dms4/dms4-install/#v4-gh-08-gh-013","title":"V4 GH-08 GH-013","text":""},{"location":"dms4/dms4-install/#v5-v6-gh-015","title":"V5 V6 GH-015","text":""},{"location":"dms4/dms4-install/#v7-v8-gh-009-gh-022","title":"V7 V8 GH-009 GH-022","text":""},{"location":"dms4/dms4-install/#v9-gh-023","title":"V9 GH-023","text":""},{"location":"dms4/dms4-install/#v10-v11-gh-026-gh-029","title":"V10 V11 GH-026 GH-029","text":""},{"location":"dms4/dms4-install/#slim-ps2s","title":"Slim PS2s","text":""},{"location":"dms4/dms4-install/#v12-v13-gh-032-gh-035","title":"V12 V13 GH-032 GH-035","text":""},{"location":"dms4/dms4-install/#v14-gh-036-gh-040","title":"V14 GH-036 GH-040","text":""},{"location":"dms4/dms4-install/#v14-gh-037-gh-041","title":"V14 GH-037 GH-041","text":""},{"location":"dms4/dms4-install/#v14-gh-040-12","title":"V14 GH-040-12","text":""},{"location":"dms4/dms4-install/#v15-gh-051-02-gh-051-12","title":"V15 GH-051-02 GH-051-12","text":""},{"location":"dms4/dms4-install/#v15-gh-051-51","title":"V15 GH-051-51","text":""},{"location":"dms4/dms4-scripting/","title":"DMS4 Scripting","text":""},{"location":"dms4/dms4-scripting/#toxic-os-app-installation-dms4-pro-dms4-se-pro","title":"Toxic OS App Installation (DMS4 Pro / DMS4 SE Pro)","text":"<p>Temporarily copied from dreaded PS2-Home</p> <p>You need to create an install script that ToxicOS can use to install your apps.</p> <p>Each script contains a list of applications, each application entry having information and directions for installation and optionally un-installation associated with it.</p> <p>Each application entry is made up by placing information inside tags. Most tags are required however some are optional.</p>"},{"location":"dms4/dms4-scripting/#install-script-example","title":"Install Script Example","text":"<pre><code>[APP]\n[HEADER]\n[TITLE]\nMY APP TITLE\n[/TITLE]\n[EXEC]\n/APPFOLDER/MY_APP.ELF\n[/EXEC]\n[AUTHOR]\nAWESOME DEV\n[/AUTHOR]\n[DESC]\nMY_APP  runs cool shit.\n[/DESC]\n[/HEADER]\n[INSTALL]\n_MKDIR /APPFOLDER\nCOPY /APPFOLDER/MY_APP.ELF /APPFOLDER/MY_APP.ELF\n[/INSTALL]\n[UNINSTALL]\nREMOVE /APPFOLDER/MY_APP.ELF\n_RMDIR /APPFOLDER\n[/UNINSTALL]\n[/APP]\n</code></pre>"},{"location":"dms4/dms4-scripting/#headers","title":"Headers","text":"<p>Each application entry starts with <code>[APP]</code> and ends with <code>[/APP]</code>. Each entry must have a <code>[HEADER]</code> and <code>[INSTALL]</code> section both of which must have a closing tag <code>/</code>. The <code>[UNINSTALL]</code> section is optional but recommended.</p> <p>The following fields are placed inside the <code>[HEADER]</code> section:</p> <ul> <li> <p><code>[TITLE]</code> : Title/name for the application - REQUIRED!</p> </li> <li> <p><code>[EXEC]</code> : Path of executable once installed - REQUIRED!</p> </li> <li> <p><code>[AUTHOR]</code> : Name of author(s) responsible for the application - optional.</p> </li> <li> <p><code>[DESC]</code> : Description of the application - optional.</p> </li> </ul>"},{"location":"dms4/dms4-scripting/#actions","title":"Actions","text":"<p>Inside the <code>[INSTALL]</code> or <code>[UNINSTALL]</code> sections you place the actions required for that operation. The old HDD Explorer scripts required that each action be specified inside an <code>[ACTION]</code> tag, however this is not required with the ToxicOS scripts - just place one action per line.</p> <p>Supported actions are as follows:</p> <ul> <li> <p><code>COPY [source] [dest]</code> - Copy the source file to the path specified by dest.</p> </li> <li> <p><code>REMOVE [file]</code> - Remove a file.</p> </li> <li> <p><code>MKDIR [dir]</code> - Make a directory.</p> </li> <li> <p><code>RMDIR [dir]</code> - Remove a directory.</p> </li> </ul>"},{"location":"dms4/dms4-scripting/#action-fail","title":"Action Fail","text":"<p>When a <code>_</code> charater is added to the start of the action, i.e. <code>RMDIR</code> becomes <code>_RMDIR</code>, then if that action fails the installation process will continue. Otherwise if an action fails the installation process will fail and ToxicOS will give an error.</p> <p>Filenames specified in an installation script are not absolute, they are relative to a certain location. This location depends on where the application is being installed to (memory card or HDD) or from. You do not need to be concerned with where files end up on the memory card or HDD, but note that when specifying a source file in the install section, that file is relative to the directory where the installation script is stored.</p> <p>ToxicOS allows whitespace in installation scripts as well as comments. Any text after a # character is treated as a comment.</p>"},{"location":"dms4/dms4-vids/","title":"Video Tutorials","text":""},{"location":"dms4/dms4-writeups/","title":"Written Tutorials","text":""},{"location":"dms4/dms4-writeups/#hotkeys","title":"Hotkeys","text":""},{"location":"dms4/dms4-writeups/#boot-modes","title":"Boot Modes","text":"<p>None Avaliable via RESET button.</p>"},{"location":"ghost2/","title":"Overview","text":""},{"location":"ghost2/#overview","title":"Overview","text":"<p>Ghost 2 v1.x supports v0-v12</p> <p>Ghost 2 v2 supports v0 to v15. HOWEVER, problem is that the software \"G2 Mananager\" does not work for FW past 1.31. Release Candidate FW 2.0 and later works for V14+ but again read the caveat prior....The team never delivered...</p> <p>So consider G2 v2 as only supporting v0-v13 and PSX</p>"},{"location":"ghost2/#ghost-2-documentation-progress","title":"Ghost 2 Documentation Progress","text":"Progress as of 3/3/2025 <ul> <li> Ghost2v2 documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware, G2 Loader &amp; Manager</li> <li> Adding apps</li> </ul> </li> <li> Written Tutorials</li> <li> Files<ul> <li> Recovery CDs</li> <li> G2 Loader &amp; Manager</li> <li> G2 Eraser</li> <li> SD2PSX/MCP2 setups</li> </ul> </li> <li> Archived Websites</li> </ul> </li> </ul>"},{"location":"ghost2/#versions","title":"Versions","text":"<p>Ghost 2 and Ghost 2v2 info here.... G2 supports up to... G2v2 supports up to...as team never finalized what they state. Ugh</p>"},{"location":"ghost2/ghost2-archived/","title":"Archived Website","text":""},{"location":"ghost2/ghost2-archived/#ghost-2-archived-website","title":"Ghost 2 Archived Website","text":""},{"location":"ghost2/ghost2-files/","title":"Team Files","text":""},{"location":"ghost2/ghost2-files/#firmware","title":"Firmware","text":"<p> Ghost 2 NTSC Recovery FW v1.31 America/ JAP</p> <p> Ghost 2 PAL Recovery FW v1.31 America/ PAL</p> <p> Ghost 2 PAL Recovery FW RC4 2.22</p> <p>Press Reset 5x to boot recovery disc, each press between 1-2 seconds apart.</p> <p>Keep in mind the team never finished RC4 v2.22 nor released version 2 of the Ghost 2 Firmware Manager which was planned one month before team disappeared. FW RC4 2.22 does not work fully with G2 Manager v1.30</p>"},{"location":"ghost2/ghost2-files/#ghost-2-firmware-manager","title":"Ghost 2 Firmware Manager","text":"<p> G2 Manager v1.30</p> <p></p> <p>Note: G2 Manager Version displayed was never fixed by team. Shows FW version, NOT G2 Manager version!</p>"},{"location":"ghost2/ghost2-files/#ghost-2-eraser","title":"Ghost 2 Eraser","text":"<p> G2 Eraser</p>"},{"location":"ghost2/ghost2-files/#ps2-homebrew","title":"PS2 Homebrew","text":"<p>Click HERE for MMCE VMC downloads. These are ready to go for you! (Multipurpose Memory Card Emulator Virtual Memory Cards)</p>"},{"location":"ghost2/ghost2-install/","title":"Install Diagrams","text":""},{"location":"ghost2/ghost2-install/#install-diagrams","title":"Install Diagrams","text":""},{"location":"ghost2/ghost2-install/#phat-ps2s","title":"Phat PS2s","text":""},{"location":"ghost2/ghost2-install/#v0-v1-v2","title":"V0 V1 V2","text":""},{"location":"ghost2/ghost2-install/#v3","title":"V3","text":""},{"location":"ghost2/ghost2-install/#v4","title":"V4","text":""},{"location":"ghost2/ghost2-install/#v5-v6","title":"V5 V6","text":""},{"location":"ghost2/ghost2-install/#v7","title":"V7","text":""},{"location":"ghost2/ghost2-install/#v8","title":"V8","text":""},{"location":"ghost2/ghost2-install/#v9","title":"V9","text":""},{"location":"ghost2/ghost2-install/#v10-v11","title":"V10 V11","text":""},{"location":"ghost2/ghost2-install/#slim-ps2s","title":"Slim PS2s","text":""},{"location":"ghost2/ghost2-install/#v12","title":"V12","text":""},{"location":"ghost2/ghost2-install/#v14-v15-version-1","title":"V14 V15 Version 1","text":""},{"location":"ghost2/ghost2-install/#v14-v15-version-2","title":"V14 V15 Version 2","text":""},{"location":"ghost2/ghost2-vids/","title":"Video Tutorials","text":""},{"location":"ghost2/ghost2-writeups/","title":"Written Tutorials","text":""},{"location":"ghost2/ghost2-writeups/#hotkeys","title":"Hotkeys:","text":"G2 Manager <p>G2 Manager MUST be installed on memory card 1 to access, or access via cd. In order to make changes, boot to Flash Upgrade mode by pressing reset 4x once every blink/second.</p>"},{"location":"ghost2/ghost2-writeups/#boot-modes","title":"Boot Modes","text":"<p>Tap RESET button on PS2 a number of times after power up, about 1x per second. The modes are as follows from STANDBY (RED LED):</p> Mode Number of Reset Taps Description Default 1 Autodetect and all features on. Ghost 2 The same as above (1) but switches chip off when the game is loaded. This is to be compatible with some homebrew and games. It will be activated every time you press the RESET button, but only to load the game, then it goes to sleep again. Chip Off 3 Switches mod chip off completely, PS2 behaves as it has not been modified. Flash Upgrade 4 The same as (1) but enables write to EEPROM - in all previous modes any write/erase/modify operations are not possible because EEPROM is hardware write protected. Recovery Mode 5 Program EEPROM for the first time (blank EEPROM), to reprogram it if corrupted etc. Recovery Mode <p>Please note - as there are NO PATCHES applied to ps2 in recovery mode we have to use 2 version of recovery disk - one for Jap region, and one for PAL region. This is because Japanese and PAL ps2 check for \"Licensed by..\" string when load PSX disk (and in this case the recovery disk as a PSX disk for ps2). American machines don't do this check by some reason so you can use either Jap or PAL recovery CD. It doesn't matter which one to use as there's no differences in EEPROM file. So customers will need to download ISO image of recovery disk for either JAP or PAL region, Americans can use either of them.</p>"},{"location":"ghost2/ghost2-writeups/#issues","title":"Issues","text":"<p>Use FW 1.31 and G2 Manager 1.30. 2.22 never had a released G2 manager that works...</p> <p>Use PS2 in RGB video out else accessing PS2 Browser (OSDSYS) has no video output.</p>"},{"location":"homebrew/","title":"Homebrew Downloads","text":""},{"location":"homebrew/#homebrew","title":"Homebrew","text":"<p>Launch from here...</p> <p>via OSDMenu!</p>"},{"location":"homebrew/#megapack-downloads","title":"MegaPack Downloads","text":"<p>SD2PSX, PSXMemCard Gen2 and MemCardPro 2 downloads are ready to go for 3rd Gen Modchips ONLY. </p> <p>Utilizing SAS<sup>1</sup> and UMCS<sup>2</sup> makes updating apps EXTREMELY EASY!</p> <p>There is no signed exploit<sup>3</sup> like FMCB included. Why? Because not all modchips play nice with this. PS2BBL is included simply as a way to add more/consistent hotkeys across all modchips.</p> <ul> <li> <p>USB (Fat16/32/Exfat)</p> <p> USB</p> <p>Unzip and merge to the the root of your USB stick<sup>4</sup>. Follow README.txt within.</p> </li> <li> <p>SD2PSX/PSXMemCard Gen2</p> <p> SD2PSX</p> <p>Unzip and merge contents to root of your MMCE device (THIS WILL WIPE YOUR BOOT CARDS!) Short press either button to select BOOT card 7: <code>MODCHIP AIO</code> if your card supports \"DEV 1\" or BOOT card 1: <code>PS2BBL AIO</code>. MUST BE ON FW 1.2.0 or later!</p> </li> <li> <p>MemCardPro 2</p> <p> MCP2</p> <p>Unzip and merge contents to root of your MMCE device. Use the WEB UI to set boot card to <code>MODCHIP AIO</code>. Manual MUST BE ON FW 1.4.0 or later!</p> </li> </ul>"},{"location":"homebrew/#ps2bbl-hotkeys","title":"PS2BBL Hotkeys","text":"<p>My Megapacks include PS2BBL as <code>mc?:/BOOT/BOOT.ELF</code> and wLE ISR Exfat as <code>mc?:/BOOT/BOOT2.ELF</code></p> <p>Set your modchip to boot from memory card, usually called DEV1. This is to ensure that one download works for all 3rd gen modchips that use such structure. Prior to PS2BBL booting, your modchip firmware will determine hotkeys. Once you see the PS2BBL logo, you have 5 seconds to push a hotkey, else OSDMenu will launch, and if that is not found, wLE ISR Exfat will launch so long as you do not delete/mess up your <code>mc?:/BOOT</code> or <code>mc?:/SYS-CONF</code> folders.</p> <p>See PS2BBL for documentation.</p> <p></p> <p>Config @ mc?:/SYS-CONF/PS2BBL.INI</p> <p>Emergency Mode</p> <p>If something breaks on your setup but PS2BBL still boots, just hold <code>R1+START</code>. It will trigger emergency mode where PS2BBL will try to boot <code>RESCUE.ELF</code> from USB device Root on an endless loop. Recommended to rename wLE ISR Exfat to <code>RESCUE.ELF</code></p>"},{"location":"homebrew/#apps-as-of-7282025","title":"Apps as of 7/28/2025:","text":"Application USB (Fat16/32/Exfat) MMCE Device VMC Crystal Chips BootManager BM Themes Apollo Save Tool GSM NHDDL (edit nhddl.yaml ) OPL 1.2.0 B2049 GID OPL 1.2.0 B2210 OPL 1.2.0 B2241 OPL MMCE Beta 3 Simple Media System unoffical OPL unofficial OPL Betrayal wLE ISR HDD wLE ISR XF MM wLE ISR XF MX wLE KHN wLE XFW BOOT Folder for other chips PS2 Link PS2 Link Highloading PS2 HDD Checker Memory Card Annihilator Mechacon Crash Tester Pad Tester PS2 HDD Tester PS2 Temps PicoDrive 2.05 ROM Version Checker Xbox 2 PS2 Xbox 2 PS2 Lite HERMES OSDMenu (in BOOT folder) PowerOff Restart DKWDRV POPSLOADER Restart IGR to Boot Card SYS-CONF NEUTRINO  USB Root MMCE root RETROLauncher (USB)  USB Root OSD-XMB (USB)  USB Root XEB+ (USB) NEEDS INSTALL  USB Root <p>NHDDL</p> <p>NHDDL supports ArgV which decreases boot time. Edit <code>mc:/SYS-CONF/OSDMENU.CNF</code> as needed. See NHDDL and OSDMenu docs.</p> <p>Missing App Notes</p> <ul> <li>XEB+ Xmas Edition must be acquired from official sources due to license<ul> <li>Can only be ran from USB!</li> </ul> </li> <li>RetroLauncher is unable to be burned to CD so it is not included on the CD installer.<ul> <li>Can only be ran from USB!</li> </ul> </li> <li>OSDXMB can only be ran from USB!</li> </ul> <ol> <li> <p>Save Application System Icons courtesy of koraxial, Ripto, Berion and Yornn\u00a0\u21a9</p> </li> <li> <p>Universal Memory Card Structure <code>mc?:/BOOT</code>, <code>mc?:/SYS-CONF</code> and <code>mc?:/APPS</code> structure that utilizes PS2BBL as BOOT.ELF and wLE ISR Exfat as BOOT2.ELF. Failover configs for both exist in SYS-CONF along with any other common file type shared between apps such as IPCONFIG.DAT\u00a0\u21a9</p> </li> <li> <p>FMCB, FHDB, FDVDB, OpenTuna and PS2BBL are signed exploits. They take advantage of a vulnurability in the PS2 update mechanism to autoboot an ELF(s) via memory card or internal hard drive<sup>5</sup> \u21a9</p> </li> <li> <p>Crystal Chip BM and DMS3/4 Toxic OS do not support exFAT. Use MBR/FAT32, otherwise supported in homebrew such as wLE ISR Exfat.\u00a0\u21a9</p> </li> <li> <p>Internal Hard Drives are compatible with all models up to and including SCPH-700XX. Recommend Offical Sony Network Adapter and Bitfunx Sata Upgrade for Phats, or iFlash2PS2 for SCPH-700XX Slim\u00a0\u21a9</p> </li> </ol>"},{"location":"mi/","title":"Overview","text":""},{"location":"mi/#overview","title":"Overview","text":""},{"location":"mi/#matrix-infinity-documentation-progress","title":"Matrix Infinity Documentation Progress","text":"Progress as of 3/3/2025 <ul> <li> Matrix Infinity documentation<ul> <li> Install Diagrams</li> <li> Video Tutorials<ul> <li> Firmware, Config</li> <li> Adding apps</li> </ul> </li> <li> Written Tutorials<ul> <li> Key Combos</li> <li> What to add?</li> </ul> </li> <li> Files<ul> <li> Recovery ISOs</li> <li> Infinity Manager</li> <li> HDD Manager (DEV2)</li> <li> Ready to go Memory Card w APPS and FW updates</li> </ul> </li> <li> Archived Websites</li> </ul> </li> </ul>"},{"location":"mi/#matrix-infinity-dot-meaning","title":"Matrix Infinity Dot meaning:","text":"Yellow Dot Red Dot Blue Dot Green Dot Green Dot Homebrew Purple Dot Models Supported v0-v13 v0-v13 v0-v13 v0-v16 v0-v16 :------------ Shipped FW 1.2 1.38 1.54 1.69 v2 Homebrew Dev FW <p>Quick note: of my collection, I have a Blue dot I installed into a V15 GH-052-12. First it did not work and was on older firmware. I installed into a V8 39K and updated to FW 1.93. After the update, the blue dot worked in the V15 GH-052-12. Homebrew works fine for being a Matrix Infinity. I have not tested backups/out of region, just homebrew....</p> Firmware/Greendot HB vs Greendot <p>All versions are upgradable to the latest revision FW (1.93)</p> <p>You may need to install into an earlier PS2 to update FW then install in your slim of choice. </p> <p>Only the new Greendot supports the v14 and higher because the bitstream on the FPGA changed</p>"},{"location":"mi/mi-archived/","title":"Archived Website","text":""},{"location":"mi/mi-archived/#team-matrix-archived-website","title":"Team Matrix Archived Website","text":""},{"location":"mi/mi-files/","title":"Team Files","text":""},{"location":"mi/mi-files/#firmware","title":"Firmware","text":"<p> 1.93 FW Extracted </p> <p>Grab this file, place on usb stick and launch with wLE ISR.</p> <p> FW 1.93 ISO</p> OLD Firmware <p> FW HomeBrew v2 DOES NOT ALLOW BACKUPS</p> <p> FW 1.91</p> <p> FW 1.88</p> <p> FW 1.82</p> <p> FW 1.75</p> <p> FW 1.68</p> <p> FW 1.54</p> <p> FW 1.50</p> <p> FW 1.46</p> <p> FW 1.45</p> <p> FW 1.40</p> <p> FW 1.39</p> <p> FW 1.38</p> <p> FW 1.36</p> <p> FW 1.35</p> <p> FW 1.31</p> <p> FW 1.30</p> Firmware Changelog <p>INFINITY Firmware Upgrade V1.93 24/11/2006 Release 1.93 of Firmware.</p> <p>ADDED: Taiwanese V14+ fix</p> <p>Notes : In certain configurations DEV mode would fail on V14+ Taiwanese machines. Now Fixed.</p> <p>INFINITY Firmware Upgrade V1.91 20/10/2006 Release 1.91 of Firmware.</p> <p>ADDED: Firmware code Enhancement</p> <p>Notes : Firmware code Enhancement necessary for release of Firmware V2.00.</p> <p>INFINITY Firmware Upgrade V1.88 01/06/2005 Release 1.88 of Firmware.</p> <p>ADDED: Some rare HK models Compatibility fix</p> <p>Notes : Some compatibility issues on some rare HK models have been fixed.</p> <p>INFINITY Firmware Upgrade V1.82 14/12/2005 Release 1.82 of Firmware.</p> <p>ADDED:</p> <p>ATAD related fixes</p> <p>Codebreaker 9.2 Compatibility</p> <p>VGA warning screen</p> <p>Notes :</p> <p>Seems like 1.75 introduced an obscure bug on some games with native HDD support. This is now fixed.</p> <p>Codebreaker 9.2 is now fully compatible with the Infinity Firmware.</p> <p>When enabling VGA mode a warning screen is now presented to the user. To confirm VGA mode and save the settings, press CIRCLE at the warning screen. In case of any problems, please refer to the VGA mode section below .</p> <p>INFINITY Firmware Upgrade V1.75 04/12/2005 Release 1.75 of Firmware.</p> <p>ADDED:</p> <p>VGA support</p> <p>Main language loading fix</p> <p>Notes :</p> <p>VGA support was added to this firmware release. You can now use the original blaze VGA adapter without the boot CD and enjoy the enhanced games compatibility that this version brings you on your VGA screen (with full original ps2 browser and DVD movies support in VGA mode). VGA mode is set to 640x480 at 60Hz (so the added bonus is that PAL games will run 20% faster). Games are automatically centered according to the original resolution without vertical or horizontal side artifacts (a common problem with the original vga adapter). PSX games are not supported at the moment but will probably be in a future release (although this is probably a low priority fix due to the small improvement that VGA support could bring to PSX games).</p> <p>When VGA mode is enabled you can access the monitor adjust screen in the config menu by pressing SELECT. You only need to do this the first time to adjust your monitor settings (a white border is present at the side of the screen, play with your monitor settings so that the 640x480 screen completely fills your viewing area).</p> <p>A schematic of the cable will be soon online on our site for those skilled in the art of patching things together :) The language selected in the browser was not correctly loaded when BOOT MODE was set to DEV1. Program automatically loaded on boot from the memory card had the incorrect default language.</p> <p>INFINITY Firmware Upgrade V1.68 03/12/2005 Release 1.68 of Firmware.</p> <p>ADDED:</p> <p>Full V14 compatibility</p> <p>PS2LOGO customization</p> <p>Automatic language selection</p> <p>Additional memory card boot applications</p> <p>Component video related fixes</p> <p>Notes : Full V14 compatibility added to the firmware.</p> <p>Installer/final users can now personalize the logo shown when booting ps2 titles.</p> <p>The language and settings selected on the ps2 browser are automatically used when booting MC/HDD applications.</p> <p>Two new buttons are now available to launch application directly from memory card. Please refer to the \"LAUNCHING MEMORY CARD APPLICATIONS\" section.</p> <p>Few small fixes for users using a component video cable.</p> <p>For detailed specifications read the .TXT files inside the InfinityFW168.zip file.</p> <p>To enter the configuration menu press TRIANGLE + CIRCLE during PS2 Boot Up.</p> <p>INFINITY Firmware Upgrade V1.54 26/07/2005 Release 1.54 of Firmware.</p> <p>ADDED:</p> <p>PSX multi disk support</p> <p>Enhanced games compatibility</p> <p>General code optimization</p> <p>Notes :</p> <p>PSX multi disk support</p> <p>A new option in the config menu enables PSX multi disk support (E.G. Gran Turismo 2).</p> <p>Fixed some issues with a few new games.</p> <p>For detailed specifications read the \"V15README.TXT\" file inside the InfinityFW15.zip file.</p> <p>Read also the \"READMEDEV2.TXT\" for use of the DEV2 installation software.</p> <p>To enter the configuration menu press TRIANGLE + CIRCLE during PS2 Boot Up.</p> <p>Feature already included from previous Infinity Manager Versions: Infinity options configuration screen.</p> <p>DEV2 mode</p> <p>Full DVD+R DL support</p> <p>RCE support</p> <p>Y-fix</p> <p>Enhanced Y-fix compatibility on several games</p> <p>Boot logo</p> <p>New config menu</p> <p>ATAD auto patch.</p> <p>HDD browser support.</p> <p>Selectable default boot mode.</p> <p>PS2 color/videomode fix.</p> <p>GameAccellerator function for PAL machines (beta).</p> <p>DEV1 compatible mode for MC applications.</p> <p>Default language selection for FastBoot/MC applications.</p> <p>Selectable pad detect time.</p> <p>V12 SCPH-70012 USA compatibility</p> <p>V12 SCPH-700xx PAL compatibility</p> <p>V12 SCPH-700xx JAP compatibility</p> <p>VMODE now selectable as PAL or NTSC</p> <p>AUTO force mode.</p> <p>Infinity configuration screen position fix for some NTSC TVs.</p> <p>Option menu color scheme was changed to offer better readability on some tv sets.</p> <p>MC_LOADER issues fixed.</p> <p>Faster boot and HDD compatibility.</p> <p>Enhanced Codebreaker compatibility</p> <p>New FastBoot procedure implemented.</p> <p>Files already in Bin/Cue format and ready to be burned to CD.</p> <p>Added extra error management support for memory card installation procedure.</p> <p>When Infinity Manager is launched from Memory Card it will automatically display the list of installed applications.</p>"},{"location":"mi/mi-files/#apps","title":"APPS","text":"<p> Infinity Manager v1.02</p> <p> DEV 2 (HDD) Installer v1.1 </p>"},{"location":"mi/mi-files/#ps2-homebrew","title":"PS2 Homebrew","text":"<p>Click HERE for MMCE VMC downloads. These are ready to go for you! (Multipurpose Memory Card Emulator Virtual Memory Cards)</p>"},{"location":"mi/mi-install/","title":"Install Diagrams","text":""},{"location":"mi/mi-install/#install-diagrams","title":"Install Diagrams","text":""},{"location":"mi/mi-install/#phat-ps2s","title":"Phat PS2s","text":""},{"location":"mi/mi-install/#v1-v2-usa-gh-004","title":"V1 V2 USA GH-004","text":""},{"location":"mi/mi-install/#v1-v2-usa-gh-005","title":"V1 V2 USA GH-005","text":""},{"location":"mi/mi-install/#v3-usa","title":"V3 USA","text":""},{"location":"mi/mi-install/#v3-asia","title":"V3 ASIA","text":""},{"location":"mi/mi-install/#v3-pal","title":"V3 PAL","text":""},{"location":"mi/mi-install/#v4-usa","title":"V4 USA","text":""},{"location":"mi/mi-install/#v4-asia","title":"V4 ASIA","text":""},{"location":"mi/mi-install/#v4-pal","title":"V4 PAL","text":""},{"location":"mi/mi-install/#v5-usa","title":"V5 USA","text":""},{"location":"mi/mi-install/#v5-asia","title":"V5 ASIA","text":""},{"location":"mi/mi-install/#v5-pal","title":"V5 PAL","text":""},{"location":"mi/mi-install/#v7-v8-usa","title":"V7 V8 USA","text":""},{"location":"mi/mi-install/#v7-v8-asia","title":"V7 V8 ASIA","text":""},{"location":"mi/mi-install/#v7-v8-pal","title":"V7 V8 PAL","text":""},{"location":"mi/mi-install/#v9-usa","title":"V9 USA","text":""},{"location":"mi/mi-install/#v9-asia","title":"V9 ASIA","text":""},{"location":"mi/mi-install/#v9-pal","title":"V9 PAL","text":""},{"location":"mi/mi-install/#v10-v11-usa","title":"V10 V11 USA","text":""},{"location":"mi/mi-install/#v10-v11-asia","title":"V10 V11 ASIA","text":""},{"location":"mi/mi-install/#v10-v11-pal","title":"V10 V11 PAL","text":""},{"location":"mi/mi-install/#slim-pstwo","title":"Slim PSTwo","text":""},{"location":"mi/mi-install/#v12-usa","title":"V12 USA","text":""},{"location":"mi/mi-install/#v12-asia","title":"V12 ASIA","text":""},{"location":"mi/mi-install/#v12-pal","title":"V12 PAL","text":""},{"location":"mi/mi-install/#v14-usa","title":"V14 USA","text":""},{"location":"mi/mi-install/#v14-asia","title":"V14 ASIA","text":""},{"location":"mi/mi-install/#v14-pal","title":"V14 PAL","text":""},{"location":"mi/mi-install/#v14-gh-040-12","title":"V14 GH-040-12","text":""},{"location":"mi/mi-install/#v14-gh-040-51","title":"V14 GH-040-51","text":""},{"location":"mi/mi-install/#v14-gh-041-xx","title":"V14 GH-041-XX","text":""},{"location":"mi/mi-install/#v15-gh-051-02","title":"V15 GH-051-02","text":""},{"location":"mi/mi-install/#v15-gh-051-51","title":"V15 GH-051-51","text":""},{"location":"mi/mi-install/#v16-gh-061-12","title":"V16 GH-061-12","text":""},{"location":"mi/mi-install/#psx-desr","title":"PSX DESR","text":""},{"location":"mi/mi-install/#psx-desr-50007000","title":"PSX DESR 5000/7000","text":""},{"location":"mi/mi-vids/","title":"Video Tutorials","text":""},{"location":"mi/mi-writeups/","title":"Written Tutorials","text":""},{"location":"mi/mi-writeups/#hotkeys","title":"Hotkeys","text":"Infinity Manager <p>Infinity Manager, which may be installed to mc0:/BOOT/MANAGER.ELF is another menu that needs a config file to define a few more boot options. Due to homebrew as of late such as OSDMenu and PS2BBL, instead of using Infinity Manager, one can name another homebrew to MANAGER.ELF for one more added hotkey.</p>"},{"location":"mi/mi-writeups/#boot-modes","title":"Boot Modes","text":"<p>To enter recovery mode:</p> <p>V1-V12 and V14 PAL: Hold the reset button until the blue eject light turns on.</p> <p>V14 and later USA and JAP:</p> <pre><code>- USA : Hold reset until blue eject lights turn on, wait 3 seconds and tap reset again.\n\n- JAP : Hold reset until blue eject lights turn on, wait 3 seconds and tap reset, wait 3 more\n</code></pre> <p>seconds and tap reset again. </p>"},{"location":"mi/mi-writeups/#infinity-option-configuration-menu","title":"Infinity option configuration menu :","text":"<p>Press TRIANGLE + CIRCLE to enter the configuration menu.</p> <p>PS2 SCREEN FIX:</p> <ul> <li> <p>OFF: Disables PS2 video fix.</p> </li> <li> <p>COLOR: Games will be output on their original video mode (PAL/NTSC) with color correction applied to match your PS2 region.</p> </li> <li> <p>PAL: Force video mode to PAL</p> </li> <li> <p>NTSC: Force video mode to NTSC</p> </li> <li> <p>PAL60: Force all games to NTSC with color correction. Games will run faster but screen might need adjusting.</p> </li> <li> <p>VGA: Enable 640x480 VGA mode.</p> </li> </ul> <p>Y SCREEN FIX:</p> <ul> <li> <p>OFF: Y screen position fix is disabled.</p> </li> <li> <p>AUTO: Y position fix enabled with default settings. Should be fine for most television sets. </p> </li> <li> <p>+/- N: Fine tune Y position. Positive values move the screen down, Negative values move it up.</p> </li> </ul> <p>PSX SCREEN FIX   : ON/OFF : Enable/Disable PSX screen fix</p> <p>PSX MULTI DISK   : ON/OFF : Enable/Disable PSX multi disk support</p> <p>MC16 PATCH       : ON/OFF : Enable/Disable D4TEL memory card support</p> <p>ATAD AUTO PATCH  : ON/OFF : Enable/Disable ATAD auto patch</p> <p>MACROVISION FIX  : ON/OFF : Enable/Disable Macrovision patch</p> <p>GREEN FIX        : ON/OFF : Enable/Disable green correction on DVD movies</p> <p>DVD VIDEO REGION : 1-8   : Selects the DVD player region. Use it to match the corresponding region on RCE protected discs.</p> <p>DVD9 DL SUPPORT  : ON/OFF : Enable/Disable Double Layer patch</p> <p>BOOT MODE:  - AUTO: Normal behaviour. All discs wil autoboot.</p> <ul> <li> <p>FAST: FastBoot. Skips logo. Same as pressing SELECT on boot.</p> </li> <li> <p>INFMAN: Execute Infinity Manager at mc0:/BOOT/MANAGER.ELF. Same as Pressing TRIANGLE on boot.</p> </li> <li> <p>DEV1: Execute BOOT.ELF at mc0:/BOOT/. Same as Pressing R1 on boot.</p> </li> <li> <p>DEV2: Execute BOOT.ELF on HDD. Same as Pressing L1 on boot.</p> </li> <li> <p>DVDV: Force DVD video mode. Same as Pressing CIRCLE on boot.</p> </li> </ul> <p>PAD DETECT TIME  : 2-10  : Select time to wait for connected pad on boot. Only useful if pad is left unconnected.</p> <p>BOOT LOGO        : ON/OFF : Enable/Disable Matrix boot logo.</p>"},{"location":"misc/","title":"Index","text":"<ul> <li> <p>Matrix Picfix Flex PCB</p> <p>Protect your 50K and 70K Laser from the dreaded Mechacon crash!</p> <p></p> </li> <li> <p>RetroGem HDMI Upscaler</p> <p>Internal HDMI Upscaler for Phat and Slim PS2!</p> <p></p> </li> <li> <p>iFlash2PS2</p> <p>Internal \"HDD\" for PS2 Slims via SD Card</p> <p></p> </li> <li> <p>Methylene</p> <p>Internal BlueRetro HW2 (Bluetooth controllers)</p> <p></p> </li> <li> <p>MemCard PRO2</p> <p>Multipurpose Memory Card Emulator<sup>1</sup></p> <p></p> <p> MCP2 Firmware</p> </li> <li> <p>SD2PSX</p> <p>Open Source MMCE<sup>1</sup></p> <p></p> <p> SD2PSXtd Firmware</p> </li> <li> <p>PSXMemCard Gen 2</p> <p>Open Source MMCE<sup>1</sup> based on SD2PSX</p> <p></p> <p> SD2PSXtd Firmware</p> </li> </ul> <ol> <li> <p>Multipurpose Memory Card Emulator acts as \"unlimited\" virtual memory cards just as compatible as sony OEM cards up to 64 or 128MB with boot card support. Recommened A2 rated SD card. Can also act as storage for homebrew and ISOS. Much faster than USB and MX4SIO. Need a compatible Loader.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"misc/picfix/","title":"Matrix Picfix","text":""},{"location":"misc/picfix/#matrix-picfix","title":"Matrix PicFix","text":""},{"location":"misc/picfix/#what-is-the-picfix-and-why-is-it-needed","title":"What is the PICfix and why is it needed?","text":"<p>Why? In an attempt to curb piracy, $ony designed the laser to fail and burn up. Sadly this backfired</p> <p></p><pre><code>---\nconfig:\n  theme: mc\n  layout: dagre\n  look: neo\n---\nflowchart LR\n subgraph s2[\"DSP\"]\n        n7[\"Process&lt;br&gt;Data\"]\n        n8[\"ECC Data&lt;br&gt;is bogus?\"]\n        n9[\"DSP Crashes\"]\n        n10[\"Continue with&lt;br&gt;normal operation\"]\n        n11[\"Was the DSP&lt;br&gt;sending a pulse&lt;br&gt;to the laser?\"]\n  end\n subgraph s3[\"LASER\"]\n        n14[\"Pulse driven&lt;br&gt;coils\"]\n  end\n    n7 --&gt; n8\n    n8 -- YES --&gt; n9\n    n8 -- NO --&gt; n10\n    n9 --&gt; n11\n    n11 --&gt; n12[\"YES\"] &amp; n13[\"NO\"]\n    n12 -- BURN! --&gt; n14\n    n13 -- \"Non-repsonsive&lt;/br&gt;until console reset\" --&gt; s3\n    s3 -- Read data from disc --&gt; n7\n    n8@{ shape: diam}\n    n11@{ shape: diam}\n    linkStyle 1 stroke:#FF6D00,fill:none\n    linkStyle 2 stroke:#00C853,fill:none\n    linkStyle 3 stroke:#FF6D00,fill:none\n    linkStyle 4 stroke:#FF6D00,fill:none\n    linkStyle 5 stroke:#00C853,fill:none\n    linkStyle 6 stroke:#D50000,fill:none\n    linkStyle 7 stroke:#00C853,fill:none</code></pre> Mermaid chart courtesy of El Isra<p></p> <p>Invented by the Matrix Team, they designed a cheap and easy fix for V9-V12 PS2s, documented here and refined by HaloSlayer255 and ModzvillUSA. When the DSP (Digital Signal Processor) crashes, this shuts down the PS2 instead of letting the laser burn up.</p> <p>I (R3Z3N) simply applied some artistic touch to make this an easier install that will look professional with decent soldering skills. CLEAN YOUR FLUX BOYS!</p>"},{"location":"misc/picfix/#models-that-need-the-matrix-picfix","title":"Models that need the Matrix Picfix","text":"<p>SCPH-370XX/3900XX The bug is present in this, but triggers much less often. Also known as V7/V8.</p> <p>SCPH-500XX GH-023, GH-026 and GH-029 motherboards. Also known as V9, V10 and V11.</p> <p>SCPH-700XX except if your PS2 is the following model with the circutry in red, you DO NOT NEED THIS FIX! Also known as V12.</p> <p></p>"},{"location":"misc/picfix/#mechacon-crash-tester-app","title":"Mechacon Crash Tester App","text":"<p>El Isra made a PS2 app which identifies if your console is safe, unsafe or uknown. Run the ELF on your PS2 with your desired exploit/elf launcher of choice:</p> <p></p>"},{"location":"misc/picfix/#appreciation-and-thanks-to","title":"Appreciation and Thanks to:","text":"<p>Atheris, SylverRez and PCM720 for kicad, electrical and logo help! Thanks to Team Matrix for the code and initial wiring. ModzvilleUSA, HaloSlayer255 and Helder for rediscovery, documentation, and circuit.</p>"},{"location":"misc/picfix/#purchasing-pcbs-or-files","title":"Purchasing PCBs or Files","text":"<p> Tindie is a better choice for bulk purchases over 10 as it is 30% savings per unit. $10/per or $7/per 10 units and over. Shipping is $5 as it includes tracking.</p> <p> $10/per and shipping is $5 as it includes tracking. Gerbers, BOM and Placement file here as well!</p> <p> Ebay is the only choice for worldwide shipping from me, $11 due to ebay fees and shipping is calculated by them.</p> <p>If you are an installer and would like a sample, please let me know!</p>"},{"location":"misc/picfix/#scph-500xx-flex-pcb","title":"SCPH-500XX Flex PCB","text":""},{"location":"misc/picfix/#gh-0023-v9-flex-pcb","title":"GH-0023 (v9) Flex PCB","text":"<ul> <li> <p>SCPH-500XX GH0-23 Flex Front</p> <p> In prototype stage...</p> </li> <li> <p>SCPH-500XX GH-023 Flex Rear</p> <p> In prototype stage...</p> </li> <li> <p>SCPH-500XX GH-023 Install Diagram</p> <p>Placeholder, not completed</p> </li> <li> <p>Installed (pics to come)</p> <p>Placeholder, not completed</p> </li> </ul>"},{"location":"misc/picfix/#scph-500xx-gh-026029-v10v11-flex-pcb","title":"SCPH-500XX GH-026/029 (v10/v11) Flex PCB","text":"<ul> <li> <p>SCPH-500XX GH-026/029 Flex Front</p> <p> In prototype stage...</p> </li> <li> <p>SCPH-500XX GH-029 Flex Rear</p> <p> In prototype stage...</p> </li> <li> <p>SCPH-500XX GH-029 Install Diagram</p> <p>Picture Placeholder In prototype stage...</p> </li> <li> <p>Installed (pics to come)</p> <p>Picture Placeholder In prototype stage...</p> </li> </ul>"},{"location":"misc/picfix/#scph-700xx-flex-pcb","title":"SCPH-700XX Flex PCB","text":"<ul> <li> <p>SCPH-700XX Flex Front</p> <p></p> </li> <li> <p>SCPH-700XX Flex Rear</p> <p></p> </li> <li> <p>SCPH-700XX Install Diagram</p> <p></p> <p>Hint: Place kapton tape on the ground point only exposing the highlighted pink sliver. Carefully rough up the ground point and pre-tin the flex PCB ground point. This will make soldering ground quite easy.</p> </li> <li> <p>SCPH-700XX Installed</p> <p></p> </li> </ul>"},{"location":"misc/picfix/#parts-needed","title":"Parts Needed","text":"<p>These are needed if you purchased a bare flex PCB from me, or are designing your own based off ModzVillUSA's circuit.</p> <p>100nF 0603 Capacitor</p> <p>1.5K Ohm 0603 Resistor</p> <p>2.2K Ohm 0603 Resistor</p> <p>PIC 12F508 IC SOIC-8 Package</p> <p>Pic 12F508 files, choose based on your programmer:</p> <p>MFIX_H8.HEX</p> <p>MFIX_H16.HEX</p>"},{"location":"misc/picfix/#tools-needed","title":"Tools needed:","text":"<p> PicKit 3 Programmer Software 3.10</p> <p>PicKit 3</p> <p>SOP8 to DIP8 adapter</p>"},{"location":"misc/picfix/#programmming-the-pic12f508","title":"Programmming the PIC12F508","text":"<p>This is neededed if you provided your own parts. If you purchased assembled from me, this will have been completed!</p> <ol> <li> <p>Plug in the PicKit 3, SOP8 to DIP8 Adapter and seat as shown:</p> <ul> <li> <p>Programmer to Seat PCB</p> <p></p> </li> <li> <p>Socketing the adapter</p> <p>  If your adapter is different, reference it's document or diagrams on its PCB where pin 1 of the PIC12F507 should plug into for the DIP8 adapter.</p> </li> <li> <p>Seat Jumper Settings</p> <p>  If your adapter is different, reference it's document or diagrams on its PCB. Your jumper settings may differ for a different adapter.</p> </li> </ul> </li> <li> <p>PicKit 3 Software install and setup:</p> <ol> <li> <p>Download install and run the PicKit 3 software.</p> </li> <li> <p>Install the PICkit Operating System by going to: </p> </li> </ol> <p>\"Tools&gt;Download PICkit Operating System\".</p> <p>Navigate to where you installed PicKit 3 and select \"PK3OSV020005.hex\". Most likely located at:</p> <p>\"C:\\Program Files (x86)\\Microchip\\PICkit 3 v3\\PK3OSV020005.hex\"</p> </li> <li> <p>Programming your PIC12F508</p> <ul> <li> <p>Step 1: Device Family&gt;Baseline</p> <p></p> </li> <li> <p>Step 2: Select Device&gt;PIC12F508</p> <p></p> </li> <li> <p>Step 3: Read your PIC12F508</p> <p></p> <p>We do this to ensure our OSSCAL (oscilator tuning) is not lost</p> </li> <li> <p>Step 4: Import Hex</p> <p></p> </li> <li> <p>Step 5: Write to PIC12F508</p> <p></p> </li> </ul> </li> </ol>"},{"location":"misc/picfix/#testing-your-picfix-pcb","title":"Testing your PICFix PCB","text":"<ol> <li> <p>Solder all points except K into your PS2. Note: PS2 should be unplugged from mains power!</p> </li> <li> <p>Bridge TEST and the 1.5K resistor pad with the middle section next to it.</p> </li> <li> <p>Using Kapton Tape, place a tiny piece under point K to avoid connecting/shorts.</p> </li> <li> <p>Verify no solder bridges elsewhere!</p> </li> <li> <p>With your power button board connected to PS2, plug PS2 into power.</p> </li> <li> <p>Press the power button on your PS2. Power should come on (green light), then off after 3 seconds.</p> <ol> <li> <p>If the PS2 did not power on, then we need a different resistor value.</p> </li> <li> <p>Disconnect your PS2 from power</p> </li> <li> <p>Desolder your existing resistor bridge, and bridge the other resistor pad.</p> </li> <li> <p>Go back to step 4 and retest. If step 5 is succes go to step 7.</p> </li> </ol> </li> <li> <p>Desolder the TEST pads</p> </li> <li> <p>Solder the K point</p> </li> <li> <p>Reassemble PS2. You now have the famous Team Matrix PICFix installed! Thanks to ModzvilleUSA/HaloSlayer255 and Helder for rediscovering, and designing the main circuit.</p> </li> </ol>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2025/#2025","title":"2025","text":""},{"location":"blog/category/kicad/","title":"KiCad","text":""},{"location":"blog/category/kicad/#kicad","title":"KiCad","text":""},{"location":"blog/category/pcb-design/","title":"PCB-Design","text":""},{"location":"blog/category/pcb-design/#pcb-design","title":"PCB-Design","text":""},{"location":"blog/category/show-and-tell/","title":"Show and Tell","text":""},{"location":"blog/category/show-and-tell/#show-and-tell","title":"Show and Tell","text":""},{"location":"blog/category/collections/","title":"Collections","text":""},{"location":"blog/category/collections/#collections","title":"Collections","text":""},{"location":"blog/category/introduction/","title":"Introduction","text":""},{"location":"blog/category/introduction/#introduction","title":"Introduction","text":""}]}